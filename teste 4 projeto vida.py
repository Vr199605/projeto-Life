import streamlit as st
import pandas as pd
import altair as alt
import datetime
import json
import time
import random
from datetime import datetime, timedelta
import io
import base64
import numpy as np

# ---------- FUN√á√ÉO PARA CONVERTER N√öMEROS EM VALORES POR EXTENSO ----------
def numero_para_extenso(valor):
    """Converte um valor num√©rico para extenso em portugu√™s"""
    if valor == 0:
        return "zero"
    
    # Dicion√°rios para convers√£o
    unidades = ['', 'um', 'dois', 'tr√™s', 'quatro', 'cinco', 'seis', 'sete', 'oito', 'nove']
    dez_a_dezenove = ['dez', 'onze', 'doze', 'treze', 'quatorze', 'quinze', 'dezesseis', 'dezessete', 'dezoito', 'dezenove']
    dezenas = ['', '', 'vinte', 'trinta', 'quarenta', 'cinquenta', 'sessenta', 'setenta', 'oitenta', 'noventa']
    centenas = ['', 'cento', 'duzentos', 'trezentos', 'quatrocentos', 'quinhentos', 'seiscentos', 'setecentos', 'oitocentos', 'novecentos']
    
    # Fun√ß√£o auxiliar para converter n√∫meros at√© 999
    def converter_ate_999(num):
        if num == 0:
            return ""
        elif num == 100:
            return "cem"
        elif num < 10:
            return unidades[num]
        elif num < 20:
            return dez_a_dezenove[num - 10]
        elif num < 100:
            dezena = num // 10
            unidade = num % 10
            if unidade == 0:
                return dezenas[dezena]
            else:
                return f"{dezenas[dezena]} e {unidades[unidade]}"
        else:
            centena = num // 100
            resto = num % 100
            if resto == 0:
                return centenas[centena]
            else:
                return f"{centenas[centena]} e {converter_ate_999(resto)}"
    
    # Caso especial para 100
    if valor == 100:
        return "cem"
    
    # Para valores at√© 999
    if valor < 1000:
        return converter_ate_999(valor)
    
    # Para valores de 1000 a 999999
    elif valor < 1000000:
        milhar = valor // 1000
        resto = valor % 1000
        
        if milhar == 1:
            texto_milhar = "mil"
        else:
            texto_milhar = f"{converter_ate_999(milhar)} mil"
        
        if resto == 0:
            return texto_milhar
        elif resto < 100:
            return f"{texto_milhar} e {converter_ate_999(resto)}"
        else:
            return f"{texto_milhar}, {converter_ate_999(resto)}"
    
    # Para valores de 1 milh√£o a 999 milh√µes
    elif valor < 1000000000:
        milhoes = valor // 1000000
        resto = valor % 1000000
        
        if milhoes == 1:
            texto_milhoes = "um milh√£o"
        else:
            texto_milhoes = f"{converter_ate_999(milhoes)} milh√µes"
        
        if resto == 0:
            return texto_milhoes
        else:
            return f"{texto_milhoes}, {numero_para_extenso(resto)}"
    
    # Para valores maiores (simplificado)
    else:
        return "valor muito alto"

def formatar_valor_com_extenso(valor, tipo="real"):
    """Formata o valor e retorna tamb√©m por extenso"""
    if valor == 0:
        return formatar_moeda(valor), "zero reais"
    
    valor_inteiro = int(valor)
    valor_decimal = int(round((valor - valor_inteiro) * 100))
    
    texto_inteiro = numero_para_extenso(valor_inteiro)
    
    if valor_decimal == 0:
        texto_decimal = ""
        texto_completo = f"{texto_inteiro} reais"
    else:
        texto_decimal = numero_para_extenso(valor_decimal)
        texto_completo = f"{texto_inteiro} reais e {texto_decimal} centavos"
    
    return formatar_moeda(valor), texto_completo

# ---------- CONFIGURA√á√ïES AVAN√áADAS ----------
st.set_page_config(
    page_title="BeSmart PRO - Sistema Inteligente de Seguros",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---------- THEME & STYLING ----------
def apply_custom_styles():
    st.markdown("""
    <style>
    /* Global Styles */
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 3rem 2rem;
        border-radius: 20px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px);
        background-size: 20px 20px;
        animation: float 20s linear infinite;
    }
    
    @keyframes float {
        0% { transform: translate(0, 0) rotate(0deg); }
        100% { transform: translate(-20px, -20px) rotate(360deg); }
    }
    
    .metric-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border-left: 6px solid #667eea;
        margin: 0.5rem 0;
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.2);
        backdrop-filter: blur(10px);
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }
    
    .seguradora-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border-top: 6px solid;
        margin: 1rem 0;
        transition: all 0.3s ease;
        border: 1px solid rgba(255,255,255,0.2);
        backdrop-filter: blur(10px);
    }
    
    .seguradora-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    
    .progress-bar {
        height: 12px;
        background: linear-gradient(135deg, #e0e0e0 0%, #f5f5f5 100%);
        border-radius: 10px;
        margin: 15px 0;
        overflow: hidden;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);
        border-radius: 10px;
        transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .progress-fill::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shimmer 2s infinite;
    }
    
    @keyframes shimmer {
        0% { left: -100%; }
        100% { left: 100%; }
    }
    
    .valor-extenso {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 0.8rem 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #667eea;
        font-size: 0.9rem;
        color: #495057;
        font-style: italic;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }
    
    .valor-extenso:hover {
        transform: translateX(5px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .valor-formatado {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        padding: 0.6rem 1rem;
        border-radius: 8px;
        margin: 0.3rem 0;
        border-left: 3px solid #2196f3;
        font-size: 0.85rem;
        color: #1565c0;
        font-weight: 500;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    }
    
    .faq-question {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .faq-question:hover {
        transform: translateX(10px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }
    
    .faq-answer {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 1.5rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        border-left: 6px solid #667eea;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }
    
    .download-section {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 2rem;
        border-radius: 20px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        text-align: center;
    }
    
    .coverage-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        margin: 0.5rem 0;
        border-left: 6px solid;
        transition: all 0.3s ease;
    }
    
    .coverage-card:hover {
        transform: translateX(10px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }
    
    .coverage-feature {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #667eea;
        transition: all 0.3s ease;
    }
    
    .coverage-feature:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .profile-checkbox {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 1.2rem;
        border-radius: 15px;
        margin: 0.5rem 0;
        border-left: 6px solid #667eea;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }
    
    .profile-checkbox:hover {
        transform: translateX(5px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
    }
    
    .compatibility-badge {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: bold;
        font-size: 0.9rem;
        display: inline-block;
        margin: 0.2rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .profile-tag {
        background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        display: inline-block;
        margin: 0.1rem;
    }
    
    .section-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem 2rem;
        border-radius: 15px;
        margin: 2rem 0 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .info-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 6px solid #667eea;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    
    .success-card {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .warning-card {
        background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .risk-card {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    /* Custom buttons */
    .stButton button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.8rem 2rem;
        border-radius: 50px;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    
    .stButton button:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
    }
    
    /* Input fields */
    .stTextInput input, .stNumberInput input, .stSelectbox select {
        border-radius: 10px;
        border: 2px solid #e0e0e0;
        padding: 0.8rem;
        transition: all 0.3s ease;
        font-size: 1rem;
    }
    
    .stTextInput input:focus, .stNumberInput input:focus, .stSelectbox select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }
    
    /* Radio buttons */
    .stRadio > div {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 1rem;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }
    
    /* Success messages */
    .stSuccess {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 6px solid #2E7D32;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    /* Warning messages */
    .stWarning {
        background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 6px solid #EF6C00;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    /* Info messages */
    .stInfo {
        background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 6px solid #0D47A1;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    /* Metric containers */
    [data-testid="metric-container"] {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border: 1px solid rgba(255,255,255,0.2);
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
    }
    
    /* Floating animation for cards */
    @keyframes float {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
    }
    
    .floating-card {
        animation: float 6s ease-in-out infinite;
    }
    
    /* Score bars */
    .score-bar-container {
        background: linear-gradient(135deg, #e0e0e0 0%, #f5f5f5 100%);
        height: 20px;
        border-radius: 10px;
        margin: 10px 0;
        overflow: hidden;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .score-bar-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea, #764ba2, #f093fb);
        border-radius: 10px;
        transition: width 0.8s ease;
        position: relative;
    }
    
    .score-bar-fill::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shimmer 2s infinite;
    }
    
    /* Text improvements */
    .main-title {
        font-size: 3.5rem;
        margin-bottom: 1rem;
        background: linear-gradient(45deg, #FFD700, #FFFFFF, #87CEEB);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 0 2px 10px rgba(0,0,0,0.3);
        font-weight: 800;
    }
    
    .section-title {
        font-size: 2.2rem;
        color: #2c3e50;
        margin-bottom: 1.5rem;
        font-weight: 700;
    }
    
    .subsection-title {
        font-size: 1.6rem;
        color: #34495e;
        margin-bottom: 1rem;
        font-weight: 600;
    }
    
    .card-title {
        font-size: 1.3rem;
        color: #2c3e50;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
    
    .highlight-text {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 600;
    }
    
    /* Form improvements */
    .form-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 2rem;
        border-radius: 20px;
        margin: 1rem 0;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }
    
    /* Dataframe improvements */
    .dataframe {
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
    }
    
    /* Expander improvements */
    .streamlit-expanderHeader {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
        font-weight: 600;
    }
    
    /* Seguradora card improvements */
    .seguradora-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1.5rem;
    }
    
    .seguradora-title {
        color: #2c3e50;
        margin: 0;
        font-size: 1.8rem;
    }
    
    .seguradora-subtitle {
        color: #666;
        margin: 0.5rem 0 0 0;
        font-size: 1rem;
        line-height: 1.4;
    }
    
    .match-badge {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 0.8rem 1.2rem;
        border-radius: 20px;
        font-weight: bold;
        font-size: 1.1rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        text-align: center;
    }
    
    .pontuacao-info {
        margin-top: 0.5rem;
        font-size: 0.9rem;
        color: #666;
        text-align: center;
    }
    
    .capital-total {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 2.5rem;
        border-radius: 20px;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        margin: 2rem 0;
    }
    
    .capital-title {
        margin: 0 0 1.5rem 0;
        font-size: 1.8rem;
        font-weight: 600;
    }
    
    .capital-value {
        font-size: 3rem;
        font-weight: bold;
        margin: 0;
        text-shadow: 0 2px 10px rgba(0,0,0,0.3);
    }
    
    .capital-subtitle {
        margin: 1rem 0 0 0;
        opacity: 0.9;
        font-size: 1.1rem;
    }
    
    /* Coverage specific styles */
    .coverage-hero {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem 2rem;
        border-radius: 20px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        position: relative;
        overflow: hidden;
    }
    
    .coverage-hero::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px);
        background-size: 30px 30px;
        animation: float 15s linear infinite;
    }
    
    .coverage-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .coverage-type-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border-top: 6px solid;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .coverage-type-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    
    .coverage-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .coverage-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    .interactive-chart {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }
    
    .coverage-comparison {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }
    
    .protection-level {
        display: flex;
        align-items: center;
        margin: 1rem 0;
        padding: 1rem;
        background: rgba(102, 126, 234, 0.05);
        border-radius: 10px;
        border-left: 4px solid #667eea;
    }
    
    .protection-icon {
        font-size: 2rem;
        margin-right: 1rem;
        min-width: 60px;
        text-align: center;
    }
    
    .protection-details {
        flex: 1;
    }
    
    .protection-bar {
        height: 8px;
        background: #e0e0e0;
        border-radius: 4px;
        margin: 0.5rem 0;
        overflow: hidden;
    }
    
    .protection-fill {
        height: 100%;
        background: linear-gradient(90deg, #667eea, #764ba2);
        border-radius: 4px;
        transition: width 1s ease-in-out;
    }
    
    .coverage-detail-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 2rem;
        border-radius: 20px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        border-left: 6px solid #667eea;
    }
    
    /* Coverage Analysis Styles */
    .coverage-analysis-section {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }
    
    .coverage-name {
        font-size: 1.4rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }
    
    .coverage-value {
        font-size: 1.8rem;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 1rem;
    }
    
    .chart-container {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }
    
    /* Detailed Coverage Card Styles */
    .detailed-coverage-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2.5rem;
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        margin: 2rem 0;
        border-left: 8px solid;
        border-right: 2px solid #f0f0f0;
        border-top: 2px solid #f0f0f0;
        border-bottom: 2px solid #f0f0f0;
    }
    
    .coverage-detail-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid #f0f0f0;
    }
    
    .coverage-detail-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }
    
    .coverage-detail-icon {
        font-size: 4rem;
        margin-right: 1.5rem;
    }
    
    .coverage-detail-value {
        font-size: 2.5rem;
        font-weight: bold;
        text-align: right;
        margin: 0;
    }
    
    .detail-section {
        margin-bottom: 2rem;
    }
    
    .detail-section-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #667eea;
        display: inline-block;
    }
    
    .benefit-item {
        background: rgba(102, 126, 234, 0.05);
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.8rem 0;
        border-left: 4px solid #667eea;
        transition: all 0.3s ease;
    }
    
    .benefit-item:hover {
        transform: translateX(5px);
        background: rgba(102, 126, 234, 0.1);
    }
    
    .tech-detail-row {
        display: flex;
        justify-content: space-between;
        padding: 1rem;
        border-bottom: 1px solid #f0f0f0;
        transition: all 0.3s ease;
    }
    
    .tech-detail-row:hover {
        background: rgba(102, 126, 234, 0.03);
    }
    
    .tech-detail-label {
        font-weight: 600;
        color: #2c3e50;
        flex: 1;
    }
    
    .tech-detail-value {
        font-weight: 500;
        color: #667eea;
        flex: 1;
        text-align: right;
    }
    
    /* Coverage Analysis Card - NOVO ESTILO */
    .coverage-analysis-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 1.5rem 0;
        border-left: 8px solid;
        transition: all 0.3s ease;
    }
    
    .coverage-analysis-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }
    
    .coverage-analysis-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }
    
    .coverage-analysis-title {
        font-size: 1.6rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
    }
    
    .coverage-analysis-value {
        font-size: 2rem;
        font-weight: bold;
        color: #667eea;
        margin: 0;
    }
    
    .coverage-analysis-description {
        color: #666;
        line-height: 1.6;
        margin-bottom: 1.5rem;
    }
    
    .coverage-analysis-features {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .coverage-feature-item {
        background: rgba(102, 126, 234, 0.05);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
    }
    
    .coverage-feature-title {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }
    
    .coverage-feature-desc {
        color: #666;
        font-size: 0.9rem;
        line-height: 1.4;
    }
    
    /* Pilar Financeiro Card */
    .pilar-financeiro-card {
        background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }

    /* Patrimonio Card */
    .patrimonio-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }

    /* Regime Casamento Card - ESTILO MELHORADO E CORRIGIDO */
    .regime-casamento-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 3rem;
        border-radius: 25px;
        box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        margin: 2rem 0;
        border-left: 10px solid #8A2BE2;
        border-right: 3px solid #f0f0f0;
        border-top: 3px solid #f0f0f0;
        border-bottom: 3px solid #f0f0f0;
        position: relative;
        overflow: hidden;
    }
    
    .regime-casamento-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(138, 43, 226, 0.03) 1px, transparent 1px);
        background-size: 30px 30px;
        animation: float 20s linear infinite;
    }
    
    .regime-header {
        display: flex;
        align-items: center;
        margin-bottom: 3rem;
        padding-bottom: 2rem;
        border-bottom: 2px solid rgba(138, 43, 226, 0.2);
        position: relative;
    }
    
    .regime-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0;
        background: linear-gradient(135deg, #2c3e50, #8A2BE2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    
    .regime-subtitle {
        color: #666;
        font-size: 1.1rem;
        margin: 0.8rem 0 0 0;
        line-height: 1.5;
    }
    
    .regime-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 2.5rem;
    }
    
    .regime-info-card {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(102, 126, 234, 0.15));
        padding: 2rem;
        border-radius: 18px;
        border: 1px solid rgba(102, 126, 234, 0.3);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .regime-info-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 30px rgba(102, 126, 234, 0.2);
    }
    
    .regime-section {
        background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(40, 167, 69, 0.15));
        padding: 2.5rem;
        border-radius: 18px;
        border: 1px solid rgba(40, 167, 69, 0.3);
        margin-bottom: 2.5rem;
        position: relative;
    }
    
    .regime-calculation {
        background: linear-gradient(135deg, rgba(255, 193, 7, 0.1), rgba(255, 193, 7, 0.15));
        padding: 2.5rem;
        border-radius: 18px;
        border: 1px solid rgba(255, 193, 7, 0.3);
        position: relative;
    }
    
    .regime-formula {
        background: rgba(255,255,255,0.9);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 4px solid #ffc107;
        font-family: 'Courier New', monospace;
        font-size: 1rem;
        margin-top: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }
    
    .regime-note {
        background: rgba(102, 126, 234, 0.08);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 4px solid #667eea;
        margin-top: 2rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
    
    /* Efeitos de hover para melhor interatividade */
    .regime-info-card:hover,
    .regime-section:hover,
    .regime-calculation:hover {
        transform: translateY(-3px);
        transition: all 0.3s ease;
    }
    
    /* Responsividade */
    @media (max-width: 768px) {
        .regime-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        
        .regime-casamento-card {
            padding: 2rem;
            margin: 1rem 0;
        }
        
        .regime-title {
            font-size: 1.8rem;
        }
        
        .regime-header {
            flex-direction: column;
            text-align: center;
        }
        
        .regime-header > div:first-child {
            margin-right: 0;
            margin-bottom: 1.5rem;
        }
    }

    /* CORRE√á√ÉO DO PROBLEMA VISUAL - CARACTER√çSTICAS PRINCIPAIS */
    .caracteristicas-principais {
        margin-bottom: 1.5rem;
    }
    
    .caracteristicas-principais h4 {
        color: #2c3e50;
        margin-bottom: 0.8rem;
        font-size: 1.2rem;
        font-weight: 600;
    }
    
    .caracteristicas-lista {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 4px solid #667eea;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }
    
    .caracteristica-item {
        display: flex;
        align-items: flex-start;
        margin-bottom: 0.8rem;
        padding: 0.8rem;
        background: rgba(102, 126, 234, 0.05);
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .caracteristica-item:hover {
        background: rgba(102, 126, 234, 0.1);
        transform: translateX(5px);
    }
    
    .caracteristica-item:last-child {
        margin-bottom: 0;
    }
    
    .caracteristica-icon {
        color: #667eea;
        margin-right: 0.8rem;
        font-size: 1.1rem;
        min-width: 20px;
    }
    
    .caracteristica-text {
        color: #2c3e50;
        font-weight: 500;
        line-height: 1.4;
    }

    /* Estilos para a aba Comparativo de Produtos - CORRIGIDO */
    .produto-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border-top: 6px solid;
        margin-bottom: 2rem;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .produto-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }
    
    .produto-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    .produto-header {
        margin-bottom: 1.5rem;
    }
    
    .produto-title {
        font-size: 1.6rem;
        font-weight: 700;
        color: #2c3e50;
        margin: 0 0 0.5rem 0;
    }
    
    .produto-descricao {
        color: #666;
        line-height: 1.5;
        margin: 0;
    }
    
    .produto-metricas {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }
    
    .produto-metrica {
        background: rgba(102, 126, 234, 0.05);
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        border-left: 3px solid #667eea;
    }
    
    .produto-metrica-label {
        font-size: 0.9rem;
        color: #667eea;
        font-weight: 600;
        margin-bottom: 0.3rem;
    }
    
    .produto-metrica-valor {
        font-size: 1.1rem;
        font-weight: bold;
        color: #2c3e50;
    }
    
    .destaques-container {
        margin-top: 1rem;
    }
    
    .destaques-label {
        font-size: 1rem;
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    /* NOVOS ESTILOS PARA AS MELHORIAS IMPLEMENTADAS */
    
    /* Aba Como Escolher o Melhor */
    .decision-matrix {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 1.5rem 0;
    }
    
    .profile-question {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .profile-question:hover {
        transform: translateX(10px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }
    
    .flow-chart {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        padding: 2rem;
        border-radius: 20px;
        border: 2px dashed #667eea;
        margin: 1.5rem 0;
        text-align: center;
    }
    
    /* Aba Cliente Aprimorada */
    .client-details-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 1.5rem 0;
        border-left: 8px solid #667eea;
    }
    
    .partner-info {
        background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .payment-receipt-chart {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 1.5rem 0;
    }
    
    /* Cards Informativos Melhorados */
    .info-card-enhanced {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 8px solid;
        transition: all 0.3s ease;
    }
    
    .info-card-enhanced:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    }
    
    /* Navega√ß√£o Atualizada */
    .nav-tab {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        margin: 0.5rem 0;
        transition: all 0.3s ease;
        cursor: pointer;
        text-align: center;
        font-weight: 600;
    }
    
    .nav-tab:hover {
        transform: translateX(5px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.2);
    }
    
    .nav-tab.active {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }
    </style>
    """, unsafe_allow_html=True)

apply_custom_styles()

# ---------- SESSION STATE INIT ----------
if 'cliente' not in st.session_state:
    st.session_state.cliente = {}
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'simulation_step' not in st.session_state:
    st.session_state.simulation_step = 0
if 'perfil_cliente' not in st.session_state:
    st.session_state.perfil_cliente = {}
if 'calculation_complete' not in st.session_state:
    st.session_state.calculation_complete = False
if 'selected_coverage' not in st.session_state:
    st.session_state.selected_coverage = None
if 'coverage_details_expanded' not in st.session_state:
    st.session_state.coverage_details_expanded = {}
if 'coberturas_selecionadas' not in st.session_state:
    st.session_state.coberturas_selecionadas = {
        'Doen√ßas Graves': True,
        'Whole Life': True,
        'Term Life': True,
        'Invalidez Permanente': True,
        'Di√°ria Incapacidade Tempor√°ria': True,
        'Di√°ria Interna√ß√£o Hospitalar': True
    }
if 'meses_doencas_graves' not in st.session_state:
    st.session_state.meses_doencas_graves = 36

# ---------- LISTA DE FILIAIS ----------
FILIAIS = [
    "BALNEARIO CAMBORIU",
    "BARRA MARAPENDI", 
    "BELEM",
    "BENTO GONCALVES",
    "BRUSQUE",
    "BX INVESTIMENTOS",
    "CAXIAS DO SUL",
    "DIRETORIA COMERCIAL REGIONAL 2",
    "FILIAL SUPER - EVANIO",
    "FLORIANOPOLIS",
    "IPANEMA",
    "JARDIM OCEANICO BARRA",
    "JURERE",
    "LAJEADO",
    "LEBLON",
    "LES GARS",
    "MANTO INVEST",
    "MARABA",
    "MINAS TRADE",
    "MOINHOS",
    "MONTES CLAROS",
    "NORTE RIO",
    "NOVA IGUACU",
    "PEDRA BRANCA",
    "PETROLINA",
    "PORTO ALEGRE",
    "QUANTOR INVEST",
    "RAJA",
    "RIO BARRA AMERICAS",
    "RJ ‚Äì EAGLE ONE",
    "SAVASSI BH",
    "SAVASSI TERESINA",
    "TRES INVEST",
    "UBERLANDIA",
    "UNISUAM",
    "VOLTA REDONDA",
    "GROWTH",
    "SMART OFFICE"
]

# ---------- ESTADO CIVIL E REGIMES DE CASAMENTO ----------
ESTADO_CIVIL_OPCOES = [
    "Solteiro(a)",
    "Casado(a)",
    "Divorciado(a)", 
    "Vi√∫vo(a)",
    "Uni√£o Est√°vel"
]

REGIME_CASAMENTO_OPCOES = [
    "N√£o especificado",
    "Comunh√£o Universal de Bens",
    "Comunh√£o Parcial de Bens", 
    "Separa√ß√£o Total de Bens",
    "Participa√ß√£o Final nos Aquestos"
]

# ---------- BASE DE DADOS DE PERFIS E PESOS ----------
PERFIS_CLIENTE = [
    "Profiss√£o com porte de armas",
    "70 anos + Doen√ßas Graves", 
    "S√≥ quer DIT",
    "Baixa renda",
    "Alta renda",
    "Pagamento Unico",
    "Resgate",
    "Jovem com filho pequeno",
    "85 anos",
    "Modular",
    "S√≥ em vida",
    "Incluir pais",
    "Doen√ßas Graves",
    "70 at√© 75",
    "Sucess√£o",
    "Autonomo",
    "Tempor√°rio",
    "Sucess√£o Empresarial",
    "Whole Life 80 anos"
]

# Pesos das seguradoras para cada perfil
PESOS_SEGURADORAS = {
    'Azos': {
        "Profiss√£o com porte de armas": 100,
        "70 anos + Doen√ßas Graves": 1,
        "S√≥ quer DIT": 100,
        "Baixa renda": 2,
        "Alta renda": 1,
        "Pagamento Unico": 2,
        "Resgate": 1,
        "Jovem com filho pequeno": 1,
        "85 anos": 1,
        "Modular": 1,
        "S√≥ em vida": 50,
        "Incluir pais": 1,
        "Doen√ßas Graves": 1,
        "70 at√© 75": 5,
        "Sucess√£o": 0,
        "Autonomo": 1,
        "Tempor√°rio": 1,
        "Sucess√£o Empresarial": 1,
        "Whole Life 80 anos": 1
    },
    'Prudential': {
        "Profiss√£o com porte de armas": 1,
        "70 anos + Doen√ßas Graves": 100,
        "S√¥ quer DIT": 1,
        "Baixa renda": 1,
        "Alta renda": 2,
        "Pagamento Unico": 10,
        "Resgate": 1,
        "Jovem com filho pequeno": 1,
        "85 anos": 1,
        "Modular": 30,
        "S√≥ em vida": 10,
        "Incluir pais": 1,
        "Doen√ßas Graves": 2,
        "70 at√© 75": 5,
        "Sucess√£o": 1,
        "Autonomo": 1,
        "Tempor√°rio": 1,
        "Sucess√£o Empresarial": 1,
        "Whole Life 80 anos": 1
    },
    'Omint': {
        "Profiss√£o com porte de armas": 1,
        "70 anos + Doen√ßas Graves": 1,
        "S√¥ quer DIT": 1,
        "Baixa renda": 1,
        "Alta renda": 1,
        "Pagamento Unico": 4,
        "Resgate": 1,
        "Jovem com filho pequeno": 1,
        "85 anos": 1,
        "Modular": 30,
        "S√≥ em vida": 1,
        "Incluir pais": 1,
        "Doen√ßas Graves": 4,
        "70 at√© 75": 5,
        "Sucess√£o": 1,
        "Autonomo": 1,
        "Tempor√°rio": 33,
        "Sucess√£o Empresarial": 2,
        "Whole Life 80 anos": 1
    },
    'MAG Seguros': {
        "Profiss√£o com porte de armas": 100,
        "70 anos + Doen√ßas Graves": 1,
        "S√≥ quer DIT": 100,
        "Baixa renda": 2,
        "Alta renda": 1,
        "Pagamento Unico": 10,
        "Resgate": 2,
        "Jovem com filho pequeno": 1,
        "85 anos": 100,
        "Modular": 1,
        "S√≥ em vida": 50,
        "Incluir pais": 1,
        "Doen√ßas Graves": 1,
        "70 at√© 75": 5,
        "Sucess√£o": 5,
        "Autonomo": 1,
        "Tempor√°rio": 1,
        "Sucess√£o Empresarial": 1,
        "Whole Life 80 anos": 100
    },
    'Icatu Seguros': {
        "Profiss√£o com porte de armas": 1,
        "70 anos + Doen√ßas Graves": 1,
        "S√≥ quer DIT": 1,
        "Baixa renda": 2,
        "Alta renda": 1,
        "Pagamento Unico": 3,
        "Resgate": 1,
        "Jovem com filho pequeno": 1,
        "85 anos": 1,
        "Modular": 1,
        "S√≥ em vida": 1,
        "Incluir pais": 100,
        "Doen√ßas Graves": 1,
        "70 at√© 75": 5,
        "Sucess√£o": 1,
        "Autonomo": 1,
        "Tempor√°rio": 1,
        "Sucess√£o Empresarial": 1,
        "Whole Life 80 anos": 1
    },
    'MetLife': {
        "Profiss√£o com porte de armas": 1,
        "70 anos + Doen√ßas Graves": 1,
        "S√¥ quer DIT": 1,
        "Baixa renda": 1,
        "Alta renda": 1,
        "Pagamento Unico": 5,
        "Resgate": 1,
        "Jovem com filho pequeno": 1,
        "85 anos": 1,
        "Modular": 30,
        "S√≥ em vida": 1,
        "Incluir pais": 1,
        "Doen√ßas Graves": 3,
        "70 at√© 75": 5,
        "Sucess√£o": 1,
        "Autonomo": 1,
        "Tempor√°rio": 1,
        "Sucess√£o Empresarial": 1,
        "Whole Life 80 anos": 1
    }
}

# ---------- FUN√á√ïES AUXILIARES ----------
def formatar_moeda(valor: float) -> str:
    """Formata um valor float para formato de moeda brasileiro"""
    if valor == 0:
        return "R$ 0,00"
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def converter_moeda_para_float(valor_str: str) -> float:
    """Converte string formatada em moeda para float"""
    if not valor_str:
        return 0.0
    
    # Remove "R$", espa√ßos e pontos de milhar
    valor_limpo = valor_str.replace("R$", "").replace(" ", "").replace(".", "")
    
    # Substitui v√≠rgula decimal por ponto
    valor_limpo = valor_limpo.replace(",", ".")
    
    try:
        return float(valor_limpo)
    except ValueError:
        return 0.0

def criar_campo_moeda_com_extenso(label: str, valor_padrao: float = 0.0, key: str = None, help_text: str = None):
    """Cria um campo de entrada formatado para moeda com valor por extenso"""
    # Formata o valor padr√£o
    valor_formatado = formatar_moeda(valor_padrao)
    
    # Cria o campo de texto com formata√ß√£o
    valor_digitado = st.text_input(
        label,
        value=valor_formatado,
        key=key,
        help=help_text,
        placeholder="R$ 0,00"
    )
    
    # Converte de volta para float
    valor_float = converter_moeda_para_float(valor_digitado)
    
    # Mostra o valor formatado em moeda
    if valor_float > 0:
        valor_formatado_moeda = formatar_moeda(valor_float)
        st.markdown(f'<div class="valor-formatado">üí∞ <strong>Valor informado:</strong> {valor_formatado_moeda}</div>', unsafe_allow_html=True)
    
    # Mostra o valor por extenso
    if valor_float > 0:
        _, valor_extenso = formatar_valor_com_extenso(valor_float)
        st.markdown(f'<div class="valor-extenso">üí¨ <strong>Valor por extenso:</strong> {valor_extenso}</div>', unsafe_allow_html=True)
    
    return valor_float

# ---------- SISTEMA DE C√ÅLCULO DE CAPITAL SEGURADO BASEADO NA TABELA ----------
class CalculadoraCapital:
    @staticmethod
    def calcular_cobertura_doencas_graves(cliente):
        """Calcula cobertura para doen√ßas graves - flex√≠vel entre 24 ou 36x despesas mensais"""
        if not st.session_state.coberturas_selecionadas.get('Doen√ßas Graves', True):
            return 0
            
        despesas_mensais = cliente.get('despesas_mensais', 0)
        meses = st.session_state.meses_doencas_graves
        return despesas_mensais * meses
    
    @staticmethod
    def calcular_whole_life(cliente):
        """Calcula Whole Life - Ajustado para regime de casamento"""
        if not st.session_state.coberturas_selecionadas.get('Whole Life', True):
            return 0
            
        patrimonio_total = cliente.get('patrimonio_total', 0)
        pilar_financeiro = cliente.get('pilar_financeiro', False)
        
        # Considerar regime de casamento no c√°lculo (agora dispon√≠vel para todos)
        estado_civil = cliente.get('estado_civil', '')
        regime_casamento = cliente.get('regime_casamento', 'N√£o especificado')
        
        # L√ìGICA DOS REGIMES DE CASAMENTO - ATUALIZADA
        if regime_casamento == 'Comunh√£o Universal de Bens':
            # Universal - usa metade do patrim√¥nio
            percentual_patrimonio = 0.5
            descricao_regime = "Universal (50% do patrim√¥nio)"
        elif regime_casamento == 'Separa√ß√£o Total de Bens':
            # Separa√ß√£o Total - usa patrim√¥nio total
            percentual_patrimonio = 1.0
            descricao_regime = "Separa√ß√£o Total (100% do patrim√¥nio)"
        elif regime_casamento == 'Comunh√£o Parcial de Bens':
            # PARCIAL - ANTES DO CASAMENTO (TOTAL) + DEPOIS DO CASAMENTO (METADE)
            patrimonio_antes_casamento = cliente.get('patrimonio_antes_casamento', 0)
            patrimonio_depois_casamento = cliente.get('patrimonio_depois_casamento', 0)
            
            # C√°lculo espec√≠fico para regime parcial
            patrimonio_ajustado_parcial = ((patrimonio_antes_casamento) + (patrimonio_depois_casamento/2))
            percentual_patrimonio = patrimonio_ajustado_parcial / patrimonio_total if patrimonio_total > 0 else 0.75
            descricao_regime = f"Parcial (Antes: 100% + Depois: 50%)"
            
            # Salvar detalhes para exibi√ß√£o
            cliente['detalhes_regime_parcial'] = {
                'patrimonio_antes_casamento': patrimonio_antes_casamento,
                'patrimonio_depois_casamento': patrimonio_depois_casamento,
                'patrimonio_ajustado_parcial': patrimonio_ajustado_parcial,
                'descricao_regime': descricao_regime
            }
        elif regime_casamento == 'Participa√ß√£o Final nos Aquestos':
            # Similar √† separa√ß√£o total para c√°lculo de prote√ß√£o
            percentual_patrimonio = 1.0
            descricao_regime = "Participa√ß√£o Final (100% do patrim√¥nio)"
        else:
            # Default para qualquer estado civil sem regime espec√≠fico
            percentual_patrimonio = 1.0
            descricao_regime = f"{estado_civil} (100% do patrim√¥nio)"
        
        # Aplicar percentual do pilar financeiro sobre o patrim√¥nio ajustado
        if pilar_financeiro:
            # Pilar financeiro: 20% do patrim√¥nio ajustado
            percentual_protecao = 0.20
            descricao_pilar = "Pilar Financeiro (20%)"
        else:
            # N√£o √© pilar financeiro: 15% do patrim√¥nio ajustado
            percentual_protecao = 0.15
            descricao_pilar = "Contribuidor (15%)"
        
        # Calcular patrim√¥nio ajustado pelo regime
        if regime_casamento == 'Comunh√£o Parcial de Bens' and 'detalhes_regime_parcial' in cliente:
            # Usar c√°lculo espec√≠fico para regime parcial
            patrimonio_ajustado = cliente['detalhes_regime_parcial']['patrimonio_ajustado_parcial']
        else:
            # Usar c√°lculo padr√£o para outros regimes
            patrimonio_ajustado = patrimonio_total * percentual_patrimonio
        
        # Calcular valor final da cobertura
        valor_cobertura = patrimonio_ajustado * percentual_protecao
        
        # Salvar detalhes para exibi√ß√£o
        cliente['detalhes_whole_life'] = {
            'valor_cobertura': valor_cobertura,
            'patrimonio_total': patrimonio_total,
            'patrimonio_ajustado': patrimonio_ajustado,
            'percentual_protecao': percentual_protecao,
            'descricao_pilar': descricao_pilar,
            'descricao_regime': descricao_regime,
            'regime_casamento': regime_casamento
        }
        
        return valor_cobertura
    
    @staticmethod
    def calcular_term_life(cliente):
        """Calcula Term Life - Custo do filho x Anos at√© independ√™ncia"""
        if not st.session_state.coberturas_selecionadas.get('Term Life', True):
            return 0
            
        despesas_filhos = cliente.get('despesas_filhos_mensais', 0)
        anos_independencia = cliente.get('anos_ate_independencia', 0)
        return despesas_filhos * anos_independencia * 12
    
    @staticmethod
    def calcular_ipa(cliente):
        """Calcula Invalidez Permanente Total - Renda x 100"""
        if not st.session_state.coberturas_selecionadas.get('Invalidez Permanente', True):
            return 0
            
        renda_mensal = cliente.get('renda_mensal', 0)
        return renda_mensal * 100
    
    @staticmethod
    def calcular_dit_rit(cliente):
        """Calcula Di√°ria por Incapacidade Tempor√°ria - Despesas/30"""
        if not st.session_state.coberturas_selecionadas.get('Di√°ria Incapacidade Tempor√°ria', True):
            return 0
            
        despesas_mensais = cliente.get('despesas_mensais', 0)
        return despesas_mensais / 30
    
    @staticmethod
    def calcular_dih(cliente):
        """Calcula Di√°ria por Interna√ß√£o Hospitalar - Despesas/30"""
        if not st.session_state.coberturas_selecionadas.get('Di√°ria Interna√ß√£o Hospitalar', True):
            return 0
            
        despesas_mensais = cliente.get('despesas_mensais', 0)
        return despesas_mensais / 30
    
    @staticmethod
    def calcular_capital_total(cliente):
        """Calcula o capital total segurado baseado em todas as coberturas"""
        coberturas = {
            'Doen√ßas Graves': CalculadoraCapital.calcular_cobertura_doencas_graves(cliente),
            'Whole Life': CalculadoraCapital.calcular_whole_life(cliente),
            'Term Life': CalculadoraCapital.calcular_term_life(cliente),
            'Invalidez Permanente': CalculadoraCapital.calcular_ipa(cliente),
            'Di√°ria Incapacidade Tempor√°ria': CalculadoraCapital.calcular_dit_rit(cliente),
            'Di√°ria Interna√ß√£o Hospitalar': CalculadoraCapital.calcular_dih(cliente)
        }
        
        capital_total = sum(coberturas.values())
        
        return {
            'capital_total': capital_total,
            'coberturas_detalhadas': coberturas,
            'detalhes_calculo': coberturas
        }

# ---------- SISTEMA DE RECOMENDA√á√ÉO POR PERFIL ----------
class SistemaRecomendacao:
    @staticmethod
    def calcular_score_seguradoras(perfil_cliente):
        """Calcula o score de cada seguradora baseado no perfil do cliente"""
        scores = {}
        
        for seguradora, pesos in PESOS_SEGURADORAS.items():
            score_total = 0
            detalhes = {}
            perfis_compat√≠veis = []
            
            for perfil, ativo in perfil_cliente.items():
                if ativo:
                    peso = pesos.get(perfil, 1)
                    score_total += peso
                    detalhes[perfil] = peso
                    if peso >= 50:
                        perfis_compat√≠veis.append(perfil)
            
            max_possible_score = sum(pesos.get(p, 1) for p in perfil_cliente if perfil_cliente[p])
            porcentagem = (score_total / max_possible_score * 100) if max_possible_score > 0 else 0
            
            scores[seguradora] = {
                'score_total': score_total,
                'porcentagem_compatibilidade': min(100, porcentagem),
                'detalhes': detalhes,
                'perfis_compat√≠veis': perfis_compat√≠veis,
                'max_possible_score': max_possible_score
            }
        
        return scores
    
    @staticmethod
    def recomendar_melhores_seguradoras(perfil_cliente):
        """Retorna as 3 melhores seguradoras para o perfil"""
        scores = SistemaRecomendacao.calcular_score_seguradoras(perfil_cliente)
        
        seguradoras_ordenadas = sorted(
            scores.items(), 
            key=lambda x: x[1]['score_total'], 
            reverse=True
        )
        
        melhores = []
        for i, (seguradora, dados) in enumerate(seguradoras_ordenadas[:3]):
            melhores.append({
                'posicao': i + 1,
                'seguradora': seguradora,
                'score': dados['score_total'],
                'porcentagem': dados['porcentagem_compatibilidade'],
                'detalhes': dados['detalhes'],
                'perfis_compat√≠veis': dados['perfis_compat√≠veis']
            })
        
        return melhores

# ---------- SEGURADORAS OFICIAIS BESMART ----------
SEGURADORAS_BESMART = {
    "Azos": {
        "pontuacao": 8.5,
        "especialidade": ["Porte de Armas", "Profiss√µes de Risco", "DIT"],
        "vantagens": ["Aceita porte de armas", "Cobertura DIT ampla", "Perfis especiais"],
        "cor": "#7C3AED",
        "tempo_aprovacao": "24h",
        "rating": "A",
        "preco_medio": "R$ 89,90",
        "perfil_ideal": "Profissionais com porte de armas e busca por DIT",
        "doencas_graves": ["C√¢ncer", "Infarto", "AVC", "Insufici√™ncia Renal", "Transplantes", "Doen√ßa de Parkinson", "Alzheimer", "Esclerose M√∫ltipla", "Paralisia", "Cegueira", "Surdez", "Queimaduras Graves"]
    },
    "Prudential": {
        "pontuacao": 9.0,
        "especialidade": ["Doen√ßas Graves", "Planejamento Sucess√≥rio", "Alta Renda"],
        "vantagens": ["Cobertura ampliada doen√ßas graves", "Solu√ß√£o sucess√≥ria", "Produtos modulares"],
        "cor": "#1E40AF",
        "tempo_aprovacao": "48h",
        "rating": "AA+",
        "preco_medio": "R$ 199,90",
        "perfil_ideal": "Clientes com foco em prote√ß√£o contra doen√ßas graves e sucess√£o",
        "doencas_graves": ["C√¢ncer", "Infarto", "AVC", "Insufici√™ncia Renal", "Transplantes", "Doen√ßa de Parkinson", "Alzheimer", "Esclerose M√∫ltipla", "Paralisia", "Cegueira", "Surdez", "Queimaduras Graves", "ELA", "Miocardiopatias", "Doen√ßas Coronarianas"]
    },
    "Omint": {
        "pontuacao": 9.4,
        "especialidade": ["Alta Renda", "Executivos", "Sa√∫de Premium"],
        "vantagens": ["Rede m√©dica exclusiva", "Atendimento concierge", "Cobertura internacional", "Hospitais premium"],
        "cor": "#FF6B35",
        "tempo_aprovacao": "24-72h",
        "rating": "AAA",
        "preco_medio": "R$ 299+",
        "perfil_ideal": "Executivos de alta renda que buscam sa√∫de premium e atendimento diferenciado",
        "doencas_graves": ["C√¢ncer", "Infarto", "AVC", "Insufici√™ncia Renal", "Transplantes", "Doen√ßa de Parkinson", "Alzheimer", "Esclerose M√∫ltipla", "Paralisia", "Cegueira", "Surdez", "Queimaduras Graves", "ELA", "Miocardiopatias", "Doen√ßas Coronarianas", "Doen√ßa de Crohn", "Esclerose Lateral Amiotr√≥fica"]
    },
    "MAG Seguros": {
        "pontuacao": 8.8,
        "especialidade": ["Servidores P√∫blicos", "Classe M√©dia", "Primeiro Seguro"],
        "vantagens": ["Pre√ßo competitivo", "Condi√ß√µes especiais servidores", "Baixa burocracia", "Pagamento flex√≠vel"],
        "cor": "#8A2BE2",
        "tempo_aprovacao": "24h",
        "rating": "A+",
        "preco_medio": "R$ 59,90",
        "perfil_ideal": "Servidores p√∫blicos e classe m√©dia buscando primeira prote√ß√£o",
        "doencas_graves": ["C√¢ncer", "Infarto", "AVC", "Insufici√™ncia Renal", "Transplantes", "Doen√ßa de Parkinson", "Alzheimer", "Esclerose M√∫ltipla"]
    },
    "Icatu Seguros": {
        "pontuacao": 9.1,
        "especialidade": ["Alta Renda", "Investidores", "Planejamento Sucess√≥rio"],
        "vantagens": ["Coberturas customiz√°veis", "Gestor dedicado", "Consultoria wealth", "Solu√ß√£o patrimonial"],
        "cor": "#00A859",
        "tempo_aprovacao": "48-72h",
        "rating": "AA+",
        "preco_medio": "R$ 189,90",
        "perfil_ideal": "Investidores e profissionais liberais com foco em prote√ß√£o patrimonial",
        "doencas_graves": ["C√¢ncer", "Infarto", "AVC", "Insufici√™ncia Renal", "Transplantes", "Doen√ßa de Parkinson", "Alzheimer", "Esclerose M√∫ltipla", "Paralisia", "Cegueira", "Surdez", "Queimaduras Graves", "ELA"]
    },
    "MetLife": {
        "pontuacao": 8.9,
        "especialidade": ["Multinacional", "Coletivos", "Grandes Empresas"],
        "vantagens": ["Atendimento global", "Solu√ß√µes corporativas", "Rede ampla"],
        "cor": "#DC2626",
        "tempo_aprovacao": "72h",
        "rating": "AA",
        "preco_medio": "R$ 179,90",
        "perfil_ideal": "Funcion√°rios de multinacionais e grandes corpora√ß√µes",
        "doencas_graves": ["C√¢ncer", "Infarto", "AVC", "Insufici√™ncia Renal", "Transplantes", "Doen√ßa de Parkinson", "Alzheimer", "Esclerose M√∫ltipla", "Paralisia", "Cegueira", "Surdez"]
    }
}

# ---------- BASE DE DADOS DETALHADA DAS COBERTURAS ----------
COBERTURAS_DETALHADAS = {
    'Doen√ßas Graves': {
        'icone': 'ü¶†',
        'cor': '#FF6B6B',
        'descricao': 'Prote√ß√£o financeira para tratamento de doen√ßas graves como c√¢ncer, infarto, AVC, etc.',
        'beneficios': [
            'Capital para tratamento especializado',
            'Cobertura para 60+ doen√ßas graves e dependendo da seguradora at√© 85 anos',
            'Pagamento em at√© 30 dias ap√≥s diagn√≥stico',
            'N√£o precisa esperar alta hospitalar'
        ],
        'indicacao': 'Ideal para todos os perfis, especialmente acima de 40 anos',
        'valor_sugerido': '36x suas despesas mensais',
        'detalhes_tecnicos': {
            'Car√™ncia': '60 dias e 1 ano para doen√ßas espec√≠ficas (ELA, Esclerose m√∫ltipla, Alzheimer)',
            'Coberturas Inclu√≠das': 'C√¢ncer, Infarto, AVC, Transplantes, etc.',
            'Renova√ß√£o': 'Autom√°tica at√© 65 anos com exce√ß√£o de um produto espec√≠fico da MAG que pode contratar at√© 85 anos'
        }
    },
    'Whole Life': {
        'icone': 'üè†',
        'cor': '#4ECDC4',
        'descricao': 'Prote√ß√£o patrimonial que garante seguran√ßa financeira para sua fam√≠lia',
        'beneficios': [
            'Acumulo de valor em conta de participa√ß√£o',
            'Prote√ß√£o vital√≠cia',
            'Resgate parcial dispon√≠vel',
            'Excelente para planejamento sucess√≥rio'
        ],
        'indicacao': 'Perfis com patrim√¥nio e planejamento familiar',
        'valor_sugerido': '20% ou 15% do seu patrim√¥nio total',
        'detalhes_tecnicos': {
            'Car√™ncia': '2 anos para suic√≠dio',
            'Resgate': 'Ap√≥s 2 anos',
            'Forma Pagamento': 'Anual √önico ou Mensal'
        }
    },
    'Term Life': {
        'icone': 'üìö',
        'cor': '#45B7D1',
        'descricao': 'Prote√ß√£o tempor√°ria focada em garantir educa√ß√£o e sustento dos filhos',
        'beneficios': [
            'Custo-benef√≠cio excelente',
            'Flexibilidade de prazo',
            'Cobertura ampla de causas',
            'Ideal para per√≠odos espec√≠ficos'
        ],
        'indicacao': 'Pais com filhos dependentes',
        'valor_sugerido': 'Despesas com filhos √ó anos at√© independ√™ncia √ó 12',
        'detalhes_tecnicos': {
            'Car√™ncia': 'sem car√™ncia ',
            'Prazos': '10, 15, 20, 25, 30 anos',
            'Cobertura': 'Morte por qualquer causa'
        }
    },
    'Invalidez Permanente': {
        'icone': '‚ôø',
        'cor': '#96CEB4',
        'descricao': 'Prote√ß√£o contra invalidez permanente por acidente ou doen√ßa',
        'beneficios': [
            'Cobertura total e parcial',
            'Isen√ß√£o de pagamento ap√≥s sinistro',
            'Reabilita√ß√£o profissional',
            
        ],
        'indicacao': 'Todos os perfis, especialmente profiss√µes de risco',
        'valor_sugerido': '100x sua renda mensal',
        'detalhes_tecnicos': {
            'Car√™ncia': '60 dias apenas para doen√ßa',
            'Grau Invalidez': 'n√£o possui',
            'Idade M√°xima': '65 anos',
            'Causas Cobertas': 'Acidentes e doen√ßas'
        }
    },
    'Di√°ria Incapacidade Tempor√°ria': {
        'icone': 'üíº',
        'cor': '#FECA57',
        'descricao': 'Prote√ß√£o de renda durante per√≠odos de incapacidade tempor√°ria para trabalho',
        'beneficios': [
            'Pagamento di√°rio durante incapacidade',
            'Per√≠odos curtos e longos',
            'Sem necessidade de interna√ß√£o',
            'Complemento ao INSS'
        ],
        'indicacao': 'Trabalhadores formais e informais',
        'valor_sugerido': 'Suas despesas mensais √∑ 30',
        'detalhes_tecnicos': {
            'Car√™ncia': '60 dias para doen√ßas',
            'Prazo M√°ximo': '1 ano completo por evento',
            'Per√≠odo Espera': 'varia de acordo com cada seguradora',
            'Limite Di√°rio': 'At√© R$ 1.000,00'
        }
    },
    'Di√°ria Interna√ß√£o Hospitalar': {
        'icone': 'üè•',
        'cor': '#FF9FF3',
        'descricao': 'Suporte financeiro durante interna√ß√µes hospitalares',
        'beneficios': [
            'Pagamento a partir do 1¬∫ dia, no m√≠nimo interna√ß√£o de 5 dias para pagamento de retroativo',
            'N√£o precisa de DIT ativada',
            'Uso livre do valor',
            'Cobertura em qualquer hospital'
        ],
        'indicacao': 'Complementar ao plano de sa√∫de',
        'valor_sugerido': 'Suas despesas mensais √∑ 30',
        'detalhes_tecnicos': {
            'Car√™ncia': '60 dias somente para doen√ßa',
            'Limite Anual': '250 diarias por eventos',
            
            
        }
    }
}

# ---------- AI-POWERED FUNCTIONS ----------
class InsuranceAI:
    @staticmethod
    def generate_personalized_story(cliente):
        nome = cliente.get('nome', 'Cliente')
        idade = cliente.get('idade', 30)
        dependentes = cliente.get('dependentes', 0)
        renda_mensal = cliente.get('renda_mensal', 5000)
        capital_total = cliente.get('capital_sugerido', 0)
        pilar_financeiro = cliente.get('pilar_financeiro', False)
        estado_civil = cliente.get('estado_civil', '')
        regime_casamento = cliente.get('regime_casamento', '')
        patrimonio_liquido = cliente.get('patrimonio_liquido', 0)
        patrimonio_imobilizado = cliente.get('patrimonio_imobilizado', 0)
        patrimonio_total = cliente.get('patrimonio_total', 0)
        
        calculo = CalculadoraCapital.calcular_capital_total(cliente)
        coberturas = calculo['coberturas_detalhadas']
        
        # Informa√ß√µes sobre estado civil
        info_estado_civil = ""
        if estado_civil == 'Casado(a)':
            info_estado_civil = f"**üíç Estado Civil:** Casado(a) - {regime_casamento}"
        elif estado_civil:
            info_estado_civil = f"**üíç Estado Civil:** {estado_civil}"
        
        # Informa√ß√µes sobre patrim√¥nio
        info_patrimonio = f"""
        **üí∞ Composi√ß√£o Patrimonial:**
        - **Patrim√¥nio L√≠quido:** {formatar_moeda(patrimonio_liquido)}
        - **Patrim√¥nio Imobilizado:** {formatar_moeda(patrimonio_imobilizado)}
        - **Patrim√¥nio Total:** {formatar_moeda(patrimonio_total)}
        """
        
        # Detalhes do c√°lculo do Whole Life
        if 'detalhes_whole_life' in cliente:
            detalhes = cliente['detalhes_whole_life']
            info_whole_life = f"**Prote√ß√£o Patrimonial:** {formatar_moeda(coberturas['Whole Life'])} ({detalhes['descricao_pilar']} sobre {detalhes['descricao_regime'].lower()})"
        else:
            info_whole_life = f"**Prote√ß√£o Patrimonial:** {formatar_moeda(coberturas['Whole Life'])} ({'20%' if pilar_financeiro else '15%'} do patrim√¥nio)"
        
        stories = {
            'familia': f"""
            **üìñ An√°lise de Prote√ß√£o da Fam√≠lia {nome}**
            
            Aos **{idade} anos**, {nome} √© respons√°vel por **{dependentes} dependente(s)** e possui uma **renda mensal de {formatar_moeda(renda_mensal)}**.
            
            {info_estado_civil}
            
            {info_patrimonio}
            
            **üéØ Perfil Financeiro:** {'**üèÜ Pilar Financeiro da Fam√≠lia** - Prote√ß√£o refor√ßada' if pilar_financeiro else '**ü§ù Contribuidor Familiar** - Prote√ß√£o adequada'}
            
            **üõ°Ô∏è Coberturas Calculadas:**
            - **Doen√ßas Graves:** {formatar_moeda(coberturas['Doen√ßas Graves'])} (36 meses de despesas)
            - {info_whole_life}
            - **Educa√ß√£o dos Filhos:** {formatar_moeda(coberturas['Term Life'])} (custo at√© independ√™ncia)
            - **Invalidez Permanente:** {formatar_moeda(coberturas['Invalidez Permanente'])} (100x a renda mensal)
            - **Prote√ß√£o de Renda:** {formatar_moeda(coberturas['Di√°ria Incapacidade Tempor√°ria'])}/dia
            - **Prote√ß√£o Hospitalar:** {formatar_moeda(coberturas['Di√°ria Interna√ß√£o Hospitalar'])}/dia
            
            **üí° Capital Total Recomendado:** **{formatar_moeda(capital_total)}**
            
            **üéØ Esta prote√ß√£o garante que sua fam√≠lia mantenha o padr√£o de vida em qualquer cen√°rio.**
            """,
            
            'profissional': f"""
            **üöÄ An√°lise de Prote√ß√£o Profissional de {nome}**
            
            Aos **{idade} anos**, {nome} est√° no auge da carreira com **renda de {formatar_moeda(renda_mensal)} mensais**.
            
            {info_estado_civil}
            
            {info_patrimonio}
            
            **üéØ Perfil Financeiro:** {'**üèÜ Pilar Financeiro** - Prote√ß√£o m√°xima' if pilar_financeiro else '**üíº Profissional Independente** - Prote√ß√£o estrat√©gica'}
            
            **üõ°Ô∏è Coberturas Calculadas:**
            - **Doen√ßas Graves:** {formatar_moeda(coberturas['Doen√ßas Graves'])} (36 meses de despesas)
            - {info_whole_life}
            - **Invalidez Permanente:** {formatar_moeda(coberturas['Invalidez Permanente'])} (100x a renda mensal)
            - **Prote√ß√£o de Renda:** {formatar_moeda(coberturas['Di√°ria Incapacidade Tempor√°ria'])}/dia
            - **Prote√ß√£o Hospitalar:** {formatar_moeda(coberturas['Di√°ria Interna√ß√£o Hospitalar'])}/dia
            
            **üí° Capital Total Recomendado:** **{formatar_moeda(capital_total)}**
            
            **üíº Sua carreira merece prote√ß√£o inteligente e completa.**
            """
        }
        
        return stories['familia'] if dependentes > 0 else stories['profissional']
    
    @staticmethod
    def calculate_risk_score(cliente):
        score = 100
        idade = cliente.get('idade', 30)
        if idade > 50: score -= 20
        elif idade > 40: score -= 10
        
        if cliente.get('dependentes', 0) > 3: score -= 15
        
        profissoes_risco = ['piloto', 'bombeiro', 'militar', 'eletricista', 'constru√ß√£o']
        if any(risk in cliente.get('profissao', '').lower() for risk in profissoes_risco):
            score -= 25
            
        return max(30, score)
    
    @staticmethod
    def recommend_insurers(cliente, perfil_cliente):
        recommendations = []
        
        scores_perfil = SistemaRecomendacao.calcular_score_seguradoras(perfil_cliente)
        
        for nome, dados in SEGURADORAS_BESMART.items():
            score_base = dados['pontuacao']
            score_perfil = scores_perfil.get(nome, {}).get('score_total', 0) / 10
            
            score_final = (score_base * 0.6) + (score_perfil * 0.4)
            match_reasons = []
            
            renda_mensal = cliente.get('renda_mensal', 5000)
            idade = cliente.get('idade', 30)
            dependentes = cliente.get('dependentes', 0)
            profissao = cliente.get('profissao', '').lower()
            patrimonio_total = cliente.get('patrimonio_total', 0)
            pilar_financeiro = cliente.get('pilar_financeiro', False)
            estado_civil = cliente.get('estado_civil', '')
            regime_casamento = cliente.get('regime_casamento', '')
            
            if renda_mensal > 25000 and patrimonio_total > 500000 and "Alta Renda" in dados['especialidade']:
                score_final += 0.5
                match_reasons.append("üíé Perfil alta renda e patrim√¥nio")
            elif 3000 <= renda_mensal <= 15000 and "Classe M√©dia" in dados['especialidade']:
                score_final += 0.3
                match_reasons.append("üè† Perfil classe m√©dia")
            
            if idade < 35 and "Jovens" in dados['especialidade']:
                score_final += 0.2
                match_reasons.append("üéØ P√∫blico jovem")
            elif idade > 45 and patrimonio_total > 300000 and "Planejamento Sucess√≥rio" in dados['especialidade']:
                score_final += 0.4
                match_reasons.append("üìä Perfil sucess√≥rio")
            
            if dependentes > 0 and "Fam√≠lias" in dados['especialidade']:
                score_final += 0.3
                match_reasons.append("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Perfil familiar")
            
            if pilar_financeiro and "Planejamento Sucess√≥rio" in dados['especialidade']:
                score_final += 0.3
                match_reasons.append("üèÜ Pilar financeiro familiar")
            
            # Considerar estado civil e regime de casamento
            if estado_civil == 'Casado(a)' and regime_casamento == 'Separa√ß√£o Total de Bens':
                if "Planejamento Sucess√≥rio" in dados['especialidade']:
                    score_final += 0.2
                    match_reasons.append("üíº Casado com separa√ß√£o total - sucess√£o importante")
            
            for perfil, ativo in perfil_cliente.items():
                if ativo and scores_perfil.get(nome, {}).get('detalhes', {}).get(perfil, 0) > 5:
                    match_reasons.append(f"‚úÖ {perfil} (peso: {scores_perfil[nome]['detalhes'][perfil]})")
            
            porcentagem_compatibilidade = scores_perfil.get(nome, {}).get('porcentagem_compatibilidade', 0)
            
            recommendations.append({
                'Seguradora': nome,
                'Score': min(10, score_final),
                'Porcentagem_Compatibilidade': porcentagem_compatibilidade,
                'Pontuacao_Total': scores_perfil.get(nome, {}).get('score_total', 0),
                'Match': f"{min(100, int(score_final * 10))}%",
                'Especialidade': ', '.join(dados['especialidade']),
                'Pre√ßo M√©dio': dados['preco_medio'],
                'Tempo': dados['tempo_aprovacao'],
                'Perfil_Ideal': dados['perfil_ideal'],
                'Raz√µes_Match': match_reasons,
                'Cor': dados['cor'],
                'Perfis_Compat√≠veis': scores_perfil.get(nome, {}).get('perfis_compat√≠veis', []),
                'Doencas_Graves': dados.get('doencas_graves', [])
            })
        
        recommendations.sort(key=lambda x: x['Score'], reverse=True)
        return recommendations

# ---------- FUN√á√ïES PARA AN√ÅLISE DE COBERTURAS ----------
def create_coverage_hero(cliente, calculo):
    """Cria se√ß√£o hero para an√°lise de coberturas"""
    capital_total = calculo['capital_total']
    coberturas = calculo['coberturas_detalhadas']
    pilar_financeiro = cliente.get('pilar_financeiro', False)
    estado_civil = cliente.get('estado_civil', '')
    regime_casamento = cliente.get('regime_casamento', '')
    
    info_estado_civil = ""
    if estado_civil == 'Casado(a)':
        info_estado_civil = f"üíç {estado_civil} - {regime_casamento}"
    elif estado_civil:
        info_estado_civil = f"üíç {estado_civil}"
    
    st.markdown(f"""
    <div class="coverage-hero">
        <h1 style="font-size: 3rem; margin-bottom: 1rem; font-weight: 800;">üõ°Ô∏è An√°lise de Coberturas</h1>
        <p style="font-size: 1.5rem; margin-bottom: 2rem; opacity: 0.9;">Prote√ß√£o Personalizada para {cliente.get('nome', 'Voc√™')}</p>
        <div style="background: rgba(255,255,255,0.2); padding: 1rem 2rem; border-radius: 25px; display: inline-block; backdrop-filter: blur(10px); margin: 0.5rem;">
            <span style="font-size: 1.2rem; font-weight: 600;">üéØ Perfil: </span>
            <span style="font-size: 1.2rem;">{'üèÜ Pilar Financeiro' if pilar_financeiro else 'ü§ù Contribuidor'}</span>
        </div>
        {f'<div style="background: rgba(255,255,255,0.2); padding: 1rem 2rem; border-radius: 25px; display: inline-block; backdrop-filter: blur(10px); margin: 0.5rem;"><span style="font-size: 1.2rem;">{info_estado_civil}</span></div>' if info_estado_civil else ''}
    </div>
    """, unsafe_allow_html=True)

def create_coverage_comparison_chart(calculo):
    """Cria gr√°fico comparativo das coberturas usando Altair"""
    coberturas = calculo['coberturas_detalhadas']
    coberturas_validas = {k: v for k, v in coberturas.items() if v > 0}
    
    if not coberturas_validas:
        st.info("üìä Complete o cadastro para ver a distribui√ß√£o das coberturas.")
        return
    
    try:
        df = pd.DataFrame({
            'Cobertura': list(coberturas_validas.keys()),
            'Valor': list(coberturas_validas.values())
        })
        
        # Gr√°fico de barras com Altair
        chart = alt.Chart(df).mark_bar().encode(
            x=alt.X('Cobertura:N', title='', axis=alt.Axis(labelAngle=0)),
            y=alt.Y('Valor:Q', title='Valor (R$)'),
            color=alt.Color('Valor:Q', scale=alt.Scale(scheme='viridis'), legend=None),
            tooltip=['Cobertura', 'Valor']
        ).properties(
            title='üìä Distribui√ß√£o do Capital por Cobertura',
            height=400
        ).configure_title(
            fontSize=20,
            color='#2c3e50'
        ).configure_axis(
            labelFontSize=12,
            titleFontSize=14
        ).configure_view(
            strokeWidth=0
        )
        
        st.altair_chart(chart, use_container_width=True)
    except Exception as e:
        st.error(f"‚ùå Erro ao criar gr√°fico: {str(e)}")
        st.info("üìä Visualiza√ß√£o alternativa: Complete o cadastro para ver a distribui√ß√£o.")

def create_protection_level_analysis(cliente, calculo):
    """Cria an√°lise dos n√≠veis de prote√ß√£o"""
    st.markdown("""
    <div class="interactive-chart">
        <h3 style="color: #2c3e50; margin-bottom: 2rem;">üéØ N√≠veis de Prote√ß√£o da Sua Carteira</h3>
    """, unsafe_allow_html=True)
    
    coberturas = calculo['coberturas_detalhadas']
    capital_total = calculo['capital_total']
    pilar_financeiro = cliente.get('pilar_financeiro', False)
    estado_civil = cliente.get('estado_civil', '')
    regime_casamento = cliente.get('regime_casamento', '')
    
    niveis_protecao = [
        {
            'nome': 'ü¶† Sa√∫de e Tratamento',
            'coberturas': ['Doen√ßas Graves', 'Di√°ria Interna√ß√£o Hospitalar'],
            'icone': 'üè•',
            'descricao': 'Prote√ß√£o contra custos m√©dicos e tratamentos'
        },
        {
            'nome': 'üíº Renda e Trabalho',
            'coberturas': ['Di√°ria Incapacidade Tempor√°ria', 'Invalidez Permanente'],
            'icone': 'üíº',
            'descricao': 'Garantia de renda durante incapacidades'
        },
        {
            'nome': 'üè† Patrim√¥nio e Fam√≠lia',
            'coberturas': ['Whole Life', 'Term Life'],
            'icone': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            'descricao': f"Prote√ß√£o do patrim√¥nio ({'20%' if pilar_financeiro else '15%'}) e futuro da fam√≠lia"
        }
    ]
    
    for nivel in niveis_protecao:
        valor_nivel = sum(coberturas.get(cobertura, 0) for cobertura in nivel['coberturas'])
        percentual = (valor_nivel / capital_total * 100) if capital_total > 0 else 0
        
        st.markdown(f"""
        <div class="protection-level">
            <div class="protection-icon">{nivel['icone']}</div>
            <div class="protection-details">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                    <h4 style="margin: 0; color: #2c3e50;">{nivel['nome']}</h4>
                    <span style="font-weight: bold; color: #667eea;">{percentual:.1f}%</span>
                </div>
                <p style="margin: 0 0 0.5rem 0; color: #666; font-size: 0.9rem;">{nivel['descricao']}</p>
                <div class="protection-bar">
                    <div class="protection-fill" style="width: {percentual}%;"></div>
                </div>
                <div style="font-size: 0.8rem; color: #999; margin-top: 0.5rem;">
                    {formatar_moeda(valor_nivel)} ‚Ä¢ {len([c for c in nivel['coberturas'] if coberturas.get(c, 0) > 0])} coberturas ativas
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)

def create_coverage_recommendations(cliente, calculo):
    """Cria recomenda√ß√µes personalizadas de cobertura"""
    st.markdown("""
    <div class="coverage-comparison">
        <h3 style="color: #2c3e50; margin-bottom: 2rem;">üí° Recomenda√ß√µes Inteligentes</h3>
    """, unsafe_allow_html=True)
    
    coberturas = calculo['coberturas_detalhadas']
    recomendacoes = []
    
    # An√°lise baseada no perfil do cliente
    idade = cliente.get('idade', 0)
    dependentes = cliente.get('dependentes', 0)
    renda = cliente.get('renda_mensal', 0)
    patrimonio_total = cliente.get('patrimonio_total', 0)
    pilar_financeiro = cliente.get('pilar_financeiro', False)
    estado_civil = cliente.get('estado_civil', '')
    regime_casamento = cliente.get('regime_casamento', '')
    
    if idade > 45 and coberturas['Doen√ßas Graves'] == 0:
        recomendacoes.append({
            'tipo': 'ü¶† Doen√ßas Graves',
            'prioridade': 'Alta',
            'motivo': 'A partir dos 45 anos, a probabilidade de doen√ßas graves aumenta significativamente',
            'acao': 'Considere adicionar esta cobertura essencial'
        })
    
    if dependentes > 0 and coberturas['Term Life'] == 0:
        recomendacoes.append({
            'tipo': 'üìö Term Life',
            'prioridade': 'Alta',
            'motivo': f'Voc√™ tem {dependentes} dependente(s) que precisam de prote√ß√£o educacional',
            'acao': 'Essencial para garantir o futuro dos seus dependentes'
        })
    
    if patrimonio_total > 100000 and coberturas['Whole Life'] < patrimonio_total * 0.15:
        percentual_ideal = 0.20 if pilar_financeiro else 0.15
        # Ajuste para separa√ß√£o total de bens
        if estado_civil == 'Casado(a)' and regime_casamento == 'Separa√ß√£o Total de Bens':
            percentual_ideal = percentual_ideal * 0.7
            
        recomendacoes.append({
            'tipo': 'üè† Whole Life',
            'prioridade': 'M√©dia',
            'motivo': f'Seu patrim√¥nio de {formatar_moeda(patrimonio_total)} merece prote√ß√£o adequada{" (ajustada para separa√ß√£o total)" if estado_civil == "Casado(a)" and regime_casamento == "Separa√ß√£o Total de Bens" else ""}',
            'acao': f'Aumente para {percentual_ideal*100:.1f}% do patrim√¥nio para melhor prote√ß√£o'
        })
    
    if renda > 0 and coberturas['Invalidez Permanente'] < renda * 80:
        recomendacoes.append({
            'tipo': '‚ôø Invalidez Permanente',
            'prioridade': 'M√©dia',
            'motivo': 'Sua renda mensal precisa de prote√ß√£o contra incapacidade',
            'acao': 'Recomendamos aumentar para 100x sua renda mensal'
        })
    
    if not recomendacoes:
        st.success("""
        **‚úÖ Sua carteira est√° bem equilibrada!**
        
        Todas as coberturas essenciais para seu perfil est√£o adequadamente dimensionadas.
        """)
    else:
        for rec in recomendacoes:
            cor_prioridade = {
                'Alta': '#dc3545',
                'M√©dia': '#ffc107',
                'Baixa': '#28a745'
            }[rec['prioridade']]
            
            st.markdown(f"""
            <div class="coverage-card" style="border-color: {cor_prioridade}">
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem;">
                    <h4 style="margin: 0; color: #2c3e50;">{rec['tipo']}</h4>
                    <span style="background: {cor_prioridade}; color: white; padding: 0.3rem 0.8rem; border-radius: 15px; font-size: 0.8rem; font-weight: bold;">
                        Prioridade {rec['prioridade']}
                    </span>
                </div>
                <p style="color: #666; margin-bottom: 0.5rem; line-height: 1.5;">{rec['motivo']}</p>
                <p style="color: #2c3e50; font-weight: 500; margin: 0;">{rec['acao']}</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("</div>", unsafe_allow_html=True)

def show_detailed_coverage_card(cobertura_nome, dados_cobertura, valor_calculado, cliente):
    """Mostra card detalhado da cobertura quando clicar em Ver Detalhes"""
    
    # CORRE√á√ÉO: Informa√ß√£o espec√≠fica para Doen√ßas Graves
    info_meses = ""
    if cobertura_nome == 'Doen√ßas Graves':
        meses = st.session_state.meses_doencas_graves
        despesas_mensais = cliente.get('despesas_mensais', 0)
        info_meses = f"""
        <div class="tech-detail-row">
            <div class="tech-detail-label">Per√≠odo de Cobertura</div>
            <div class="tech-detail-value" style="color: #28a745; font-weight: bold;">
                {meses} meses de despesas ({formatar_moeda(despesas_mensais)} √ó {meses})
            </div>
        </div>
        """
    
    st.markdown(f"""
    <div class="detailed-coverage-card" style="border-color: {dados_cobertura['cor']}">
        <div class="coverage-detail-header">
            <div style="display: flex; align-items: center;">
                <div class="coverage-detail-icon">{dados_cobertura['icone']}</div>
                <div>
                    <h1 class="coverage-detail-title">{cobertura_nome}</h1>
                    <p style="color: #666; font-size: 1.2rem; margin: 0.5rem 0 0 0;">{dados_cobertura['descricao']}</p>
                </div>
            </div>
            <div>
                <div class="coverage-detail-value" style="color: {dados_cobertura['cor']}">
                    {formatar_moeda(valor_calculado) if 'Di√°ria' not in cobertura_nome else formatar_moeda(valor_calculado) + '/dia'}
                </div>
                <p style="color: #666; text-align: right; margin: 0.5rem 0 0 0;">Valor Calculado</p>
            </div>
        </div>
        
        <div class="detail-section">
            <h3 class="detail-section-title">üéØ Benef√≠cios Inclu√≠dos</h3>
    """, unsafe_allow_html=True)
    
    for beneficio in dados_cobertura['beneficios']:
        st.markdown(f"""
        <div class="benefit-item">
            <div style="display: flex; align-items: center;">
                <span style="color: {dados_cobertura['cor']}; margin-right: 0.8rem; font-size: 1.2rem;">‚úì</span>
                <span style="font-weight: 500;">{beneficio}</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown(f"""
            </div>
            <div class="detail-section">
                <h3 class="detail-section-title">üìã Detalhes T√©cnicos</h3>
                {info_meses}
    """, unsafe_allow_html=True)
    
    for chave, valor in dados_cobertura['detalhes_tecnicos'].items():
        st.markdown(f"""
        <div class="tech-detail-row">
            <div class="tech-detail-label">{chave}</div>
            <div class="tech-detail-value">{valor}</div>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("""
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Bot√µes de a√ß√£o
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button(f"üóÇÔ∏è Simular {cobertura_nome}", key=f"simular_{cobertura_nome}", use_container_width=True):
            st.success(f"**Simula√ß√£o iniciada para {cobertura_nome}!**")
    
    with col2:
        if st.button("üìä Comparar com Outras", key=f"comparar_{cobertura_nome}", use_container_width=True):
            st.info(f"**Comparando {cobertura_nome} com outras seguradoras...**")
    
    with col3:
        if st.button("‚ùå Fechar Detalhes", key=f"fechar_{cobertura_nome}", use_container_width=True):
            st.session_state.coverage_details_expanded[cobertura_nome] = False
            st.rerun()

# ---------- FUN√á√ÉO CORRIGIDA PARA GR√ÅFICO DE PAGAMENTO X RECEBIMENTO ----------
def create_payment_receipt_chart(cliente):
    """Cria gr√°fico de pagamento x recebimento usando Altair - CORRIGIDO"""
    capital_total = cliente.get('capital_sugerido', 0)
    idade = cliente.get('idade', 30)
    
    if capital_total == 0:
        return None
    
    try:
        # Simular dados para 20 anos - CORRE√á√ÉO: Garantir dados v√°lidos
        anos = list(range(1, 21))
        pagamentos_anuais = []
        recebimentos_potenciais = []
        
        # Estimativa de pagamento anual (aproximadamente 1-2% do capital segurado)
        pagamento_anual_estimado = capital_total * 0.015
        
        for ano in anos:
            # Pagamentos acumulados
            pagamento_acumulado = pagamento_anual_estimado * ano
            pagamentos_anuais.append(float(pagamento_acumulado))  # CORRE√á√ÉO: Converter para float
            
            # Recebimento potencial (capital total dispon√≠vel a qualquer momento)
            recebimentos_potenciais.append(float(capital_total))  # CORRE√á√ÉO: Converter para float
        
        # CORRE√á√ÉO: Criar DataFrame com dados v√°lidos
        df = pd.DataFrame({
            'Ano': anos,
            'Pagamentos_Acumulados': pagamentos_anuais,
            'Recebimento_Potencial': recebimentos_potenciais
        })
        
        # CORRE√á√ÉO: Verificar se h√° dados v√°lidos
        if df.empty or df['Pagamentos_Acumulados'].isna().all() or df['Recebimento_Potencial'].isna().all():
            return None
        
        # CORRE√á√ÉO: Criar gr√°fico com tratamento de erro
        try:
            # Transformar dados para formato longo
            df_melted = df.melt(id_vars=['Ano'], 
                              value_vars=['Pagamentos_Acumulados', 'Recebimento_Potencial'],
                              var_name='Tipo', 
                              value_name='Valor')
            
            # Mapear nomes mais amig√°veis
            df_melted['Tipo'] = df_melted['Tipo'].map({
                'Pagamentos_Acumulados': 'Pagamentos Acumulados',
                'Recebimento_Potencial': 'Recebimento Potencial'
            })
            
            # Criar gr√°fico
            chart = alt.Chart(df_melted).mark_line(point=True, strokeWidth=3).encode(
                x=alt.X('Ano:O', title='Anos de Pagamento', axis=alt.Axis(labelAngle=0)),
                y=alt.Y('Valor:Q', title='Valor (R$)', axis=alt.Axis(format='$.2f')),
                color=alt.Color('Tipo:N', 
                              scale=alt.Scale(
                                  domain=['Pagamentos Acumulados', 'Recebimento Potencial'],
                                  range=['#FF6B6B', '#4ECDC4']
                              ),
                              legend=alt.Legend(title='Legenda')),
                tooltip=['Ano', 'Tipo', alt.Tooltip('Valor:Q', format='$.2f')]
            ).properties(
                title='üìà Proje√ß√£o de Pagamento x Recebimento (20 anos)',
                height=400,
                width=600
            ).configure_title(
                fontSize=18,
                anchor='start'
            ).configure_axis(
                labelFontSize=12,
                titleFontSize=14
            ).configure_legend(
                titleFontSize=12,
                labelFontSize=11
            )
            
            return chart
            
        except Exception as e:
            return None
            
    except Exception as e:
        return None

# ---------- COMPONENTES ----------
def create_progress_tracker(step, total_steps=3):
    progress = (step / total_steps) * 100
    st.markdown(f"""
    <div class="progress-bar">
        <div class="progress-fill" style="width: {progress}%"></div>
    </div>
    <div style="display: flex; justify-content: space-between; font-size: 0.9rem; color: #666; margin-top: 0.5rem;">
        <span>{"‚úÖ" if step >= 1 else "‚≠ï"} <strong>Cadastro</strong></span>
        <span>{"‚úÖ" if step >= 2 else "‚≠ï"} <strong>An√°lise</strong></span>
        <span>{"‚úÖ" if step >= 3 else "‚≠ï"} <strong>Resultado</strong></span>
    </div>
    """, unsafe_allow_html=True)

def create_insurer_card(seguradora, rank):
    cor = seguradora['Cor']
    
    perfis_badges = ""
    for perfil in seguradora.get('Perfis_Compat√≠veis', []):
        perfis_badges += f'<span class="profile-tag">{perfil}</span>'
    
    with st.container():
        st.markdown(f"""
        <div class="seguradora-card" style="border-color: {cor}">
            <div class="seguradora-header">
                <div>
                    <h3 class="seguradora-title">{seguradora['Seguradora']}</h3>
                    <p class="seguradora-subtitle">{seguradora['Perfil_Ideal']}</p>
                </div>
                <div>
                    <div class="match-badge">
                        #{rank} - {seguradora['Match']} Match
                    </div>
                    <div class="pontuacao-info">
                        <strong>Pontua√ß√£o Total:</strong> {seguradora['Pontuacao_Total']} pts
                    </div>
                </div>
            </div>
            
            <div style="margin-bottom: 1.5rem;">
                <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                    <strong style="color: #2c3e50;">Compatibilidade:</strong>
                    <span style="color: #667eea; font-weight: bold;">{seguradora['Porcentagem_Compatibilidade']:.1f}%</span>
                </div>
                <div class="score-bar-container">
                    <div class="score-bar-fill" style="width: {seguradora['Porcentagem_Compatibilidade']}%;"></div>
                </div>
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; margin-bottom: 1.5rem;">
                <div>
                    <strong style="color: #2c3e50;">üìä Especialidade:</strong><br>
                    <span style="color: #555; line-height: 1.4;">{seguradora['Especialidade']}</span>
                </div>
                <div>
                    <strong style="color: #2c3e50;">üí∞ Pre√ßo M√©dio:</strong> {seguradora['Pre√ßo M√©dio']}<br>
                    <strong style="color: #2c3e50;">‚è±Ô∏è Aprova√ß√£o:</strong> {seguradora['Tempo']}
                </div>
            </div>
            
            <div style="margin-top: 1rem;">
                <strong style="color: #2c3e50; display: block; margin-bottom: 0.5rem;">üéØ Perfis Compat√≠veis:</strong>
                {perfis_badges if perfis_badges else '<div style="color: #999; font-size: 0.9rem; padding: 0.5rem;">Nenhum perfil espec√≠fico identificado</div>'}
            </div>
        </div>
        """, unsafe_allow_html=True)

def show_risk_analysis(cliente):
    """Mostra an√°lise de riscos e necessidade do seguro"""
    idade = cliente.get('idade', 30)
    dependentes = cliente.get('dependentes', 0)
    renda_mensal = cliente.get('renda_mensal', 0)
    profissao = cliente.get('profissao', '')
    pilar_financeiro = cliente.get('pilar_financeiro', False)
    estado_civil = cliente.get('estado_civil', '')
    regime_casamento = cliente.get('regime_casamento', '')
    patrimonio_liquido = cliente.get('patrimonio_liquido', 0)
    patrimonio_imobilizado = cliente.get('patrimonio_imobilizado', 0)
    patrimonio_total = cliente.get('patrimonio_total', 0)
    
    st.markdown('<div class="subsection-title">‚ö†Ô∏è An√°lise de Riscos e Necessidade</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="risk-card">
            <h4 style="margin: 0 0 1rem 0;">üö® Riscos Identificados</h4>
        """, unsafe_allow_html=True)
        
        riscos = []
        
        if idade > 45:
            riscos.append(f"**üë¥ Idade ({idade} anos)**: Maior probabilidade de doen√ßas graves")
        if dependentes > 0:
            riscos.append(f"**üë®‚Äçüë©‚Äçüëß‚Äçüë¶ {dependentes} dependente(s)**: Responsabilidade familiar aumentada")
        if renda_mensal > 0:
            riscos.append(f"**üí∞ Renda de {formatar_moeda(renda_mensal)}**: Necessidade de prote√ß√£o de renda")
        
        if pilar_financeiro:
            riscos.append("**üèÜ Pilar Financeiro**: Responsabilidade principal pelo sustento familiar")
        
        # Informa√ß√µes sobre patrim√¥nio
        if patrimonio_total > 0:
            riscos.append(f"**üè† Patrim√¥nio Total de {formatar_moeda(patrimonio_total)}**: Necessidade de prote√ß√£o patrimonial")
        
        # Informa√ß√µes sobre estado civil
        if estado_civil == 'Casado(a)':
            if regime_casamento == 'Separa√ß√£o Total de Bens':
                riscos.append("**üíº Separa√ß√£o Total de Bens**: Prote√ß√£o patrimonial diferenciada")
            else:
                riscos.append(f"**üíç {estado_civil}**: Responsabilidades compartilhadas - {regime_casamento}")
        elif estado_civil:
            riscos.append(f"**üíç {estado_civil}**: Considera√ß√µes espec√≠ficas de prote√ß√£o")
        
        profissoes_risco = {
            'constru√ß√£o': 'Risco de acidentes de trabalho',
            'motorista': 'Risco de acidentes de tr√¢nsito', 
            'eletricista': 'Risco de acidentes el√©tricos',
            'militar': 'Risco ocupacional elevado',
            'bombeiro': 'Alto risco profissional'
        }
        
        for risco, descricao in profissoes_risco.items():
            if risco in profissao.lower():
                riscos.append(f"**üè¢ Profiss√£o**: {descricao}")
        
        if not riscos:
            riscos.append("**‚úÖ Perfil de risco moderado**")
        
        for risco in riscos:
            st.markdown(f"- {risco}", unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="info-card">
            <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üõ°Ô∏è Porque Voc√™ Precisa de Seguro</h4>
        """, unsafe_allow_html=True)
        
        beneficios = [
            "**üíº Prote√ß√£o de Renda**: Garante sustento familiar em caso de incapacidade",
            "**üè• Cobertura Hospitalar**: Custos com interna√ß√£o e tratamentos",
            "**üìö Educa√ß√£o dos Filhos**: Mant√©m estudos dos dependentes",
            "**üè† Manuten√ß√£o do Patrim√¥nio**: Protege seu patrim√¥nio conquistado",
            "**üòå Paz Espiritual**: Seguran√ßa para voc√™ e sua fam√≠lia",
            "**üí∞ Planejamento Sucess√≥rio**: Organiza√ß√£o para as gera√ß√µes futuras"
        ]
        
        for beneficio in beneficios:
            st.markdown(f"- {beneficio}", unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)

# ---------- FUN√á√ïES DE DOWNLOAD ----------
def gerar_proposta_txt(cliente, seguradoras_recomendadas, melhores_seguradoras):
    """Gera uma proposta em formato TXT"""
    
    calculo = CalculadoraCapital.calcular_capital_total(cliente)
    coberturas = calculo['coberturas_detalhadas']
    pilar_financeiro = cliente.get('pilar_financeiro', False)
    estado_civil = cliente.get('estado_civil', '')
    regime_casamento = cliente.get('regime_casamento', '')
    patrimonio_liquido = cliente.get('patrimonio_liquido', 0)
    patrimonio_imobilizado = cliente.get('patrimonio_imobilizado', 0)
    patrimonio_total = cliente.get('patrimonio_total', 0)
    
    proposta = f"""
============================================
PROPOSTA DE SEGURO DE VIDA - BESMART PRO
============================================

DADOS DO CLIENTE:
----------------
Nome: {cliente.get('nome', 'N√£o informado')}
Idade: {cliente.get('idade', 'N√£o informado')} anos
Profiss√£o: {cliente.get('profissao', 'N√£o informado')}
Estado Civil: {estado_civil}
{('Regime de Casamento: ' + regime_casamento) if estado_civil == 'Casado(a)' else ''}
Dependentes: {cliente.get('dependentes', 0)}
Renda Mensal: {formatar_moeda(cliente.get('renda_mensal', 0))}

COMPOSI√á√ÉO PATRIMONIAL:
----------------------
Patrim√¥nio L√≠quido: {formatar_moeda(patrimonio_liquido)}
Patrim√¥nio Imobilizado: {formatar_moeda(patrimonio_imobilizado)}
Patrim√¥nio Total: {formatar_moeda(patrimonio_total)}

Pilar Financeiro: {'Sim' if pilar_financeiro else 'N√£o'}
Filial: {cliente.get('filial', 'N√£o informado')}

PERFIL DO CLIENTE:
-----------------
"""
    
    perfis_ativos = [perfil for perfil, ativo in st.session_state.perfil_cliente.items() if ativo]
    if perfis_ativos:
        for perfil in perfis_ativos:
            proposta += f"- {perfil}\n"
    else:
        proposta += "- Nenhum perfil espec√≠fico selecionado\n"
    
    proposta += f"""
DETALHAMENTO DAS COBERTURAS:
---------------------------
"""
    
    for cobertura, valor in coberturas.items():
        if valor > 0:
            if 'Di√°ria' in cobertura:
                proposta += f"- {cobertura}: {formatar_moeda(valor)}/dia\n"
            else:
                proposta += f"- {cobertura}: {formatar_moeda(valor)}\n"
    
    # Informa√ß√£o sobre ajuste de regime de casamento
    if 'detalhes_whole_life' in cliente:
        detalhes = cliente['detalhes_whole_life']
        proposta += f"\nüí° **OBSERVA√á√ÉO:** {detalhes['descricao_pilar']} sobre {detalhes['descricao_regime'].lower()}\n"
    
    proposta += f"""
CAPITAL TOTAL SUGERIDO: {formatar_moeda(calculo['capital_total'])}

MELHORES SEGURADORAS PARA SEU PERFIL:
------------------------------------
"""
    
    for melhor in melhores_seguradoras:
        proposta += f"""
{melhor['posicao']}. {melhor['seguradora']}
   - Score de Compatibilidade: {melhor['score']} pontos
   - Porcentagem: {melhor['porcentagem']:.1f}%
   - Perfis que mais contribu√≠ram: {', '.join(list(melhor['detalhes'].keys())[:3])}
"""
    
    proposta += f"""
SEGURADORAS RECOMENDADAS:
-----------------------
"""
    
    for i, seguradora in enumerate(seguradoras_recomendadas[:3], 1):
        proposta += f"""
{i}. {seguradora['Seguradora']}
   - Compatibilidade: {seguradora['Match']}
   - Score: {seguradora['Score']}/10
   - Pontua√ß√£o Total: {seguradora['Pontuacao_Total']} pontos
   - Porcentagem: {seguradora['Porcentagem_Compatibilidade']:.1f}%
   - Especialidade: {seguradora['Especialidade']}
   - Pre√ßo M√©dio: {seguradora['Pre√ßo M√©dio']}
"""
    
    proposta += f"""
DADOS DO ASSESSOR:
-----------------
Filial: {cliente.get('filial', 'N√£o informado')}
Assessor: {cliente.get('assessor', 'N√£o informado')}
Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

============================================
BeSmart PRO - Parceiro Oficial
============================================
"""
    
    return proposta

def criar_download_button(data, filename, button_text, file_type):
    """Cria um bot√£o de download"""
    
    if file_type == 'txt':
        b64 = base64.b64encode(data.encode()).decode()
        href = f'<a href="data:file/txt;base64,{b64}" download="{filename}" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 14px 28px; text-decoration: none; border-radius: 10px; display: inline-block; font-weight: bold; text-align: center; font-size: 1rem; box-shadow: 0 4px 15px rgba(0,0,0,0.2); transition: all 0.3s ease;">{button_text}</a>'
    elif file_type == 'csv':
        csv = data.to_csv(index=False)
        b64 = base64.b64encode(csv.encode()).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="{filename}" style="background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%); color: white; padding: 14px 28px; text-decoration: none; border-radius: 10px; display: inline-block; font-weight: bold; text-align: center; font-size: 1rem; box-shadow: 0 4px 15px rgba(0,0,0,0.2); transition: all 0.3s ease;">{button_text}</a>'
    
    return href

# ---------- CONTE√öDO PARA ABA "COMO ESCOLHER O MELHOR" ----------
def create_how_to_choose_section():
    """Cria a se√ß√£o 'Como Escolher o Melhor Produto'"""
    
    st.markdown("""
    <div class="success-card">
        <h2 style="margin: 0 0 1rem 0; font-size: 2.5rem; text-align: center;">üèÜ Como Escolher o Melhor Seguro</h2>
        <p style="font-size: 1.3rem; opacity: 0.9; text-align: center; margin: 0;">Guia completo para tomar a melhor decis√£o</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Crit√©rios de Escolha
    st.markdown("""
    <div class="section-header">
        <h3 style="margin: 0; font-size: 1.5rem;">üéØ Crit√©rios Essenciais para Escolha</h3>
    </div>
    """, unsafe_allow_html=True)
    
    criterios = [
        {
            "titulo": "üí∞ Custo-Benef√≠cio",
            "descricao": "N√£o √© s√≥ sobre o pre√ßo, mas o valor que voc√™ recebe por ele",
            "detalhes": [
                "Compare o custo anual total (pr√™mio)",
                "Avalie as coberturas inclu√≠das no valor",
                "Considere franquias e car√™ncias",
                "Verifique se h√° cobran√ßa de taxas extras"
            ],
            "icone": "üí∞"
        },
        {
            "titulo": "üõ°Ô∏è Coberturas Inclu√≠das",
            "descricao": "O que realmente importa quando voc√™ precisar",
            "detalhes": [
                "Doen√ßas Graves (quantas e quais)",
                "Invalidez por acidente e doen√ßa",
                "Di√°rias por incapacidade",
                "Assist√™ncias funeral e residencial"
            ],
            "icone": "üõ°Ô∏è"
        },
        {
            "titulo": "‚ö° Car√™ncias e Exclus√µes",
            "descricao": "Os detalhes que fazem toda a diferen√ßa",
            "detalhes": [
                "Tempo de car√™ncia para cada cobertura",
                "Condi√ß√µes pr√©-existentes cobertas",
                "Exclus√µes por atividades de risco",
                "Limites de idade para renova√ß√£o"
            ],
            "icone": "‚ö°"
        },
        {
            "titulo": "üèÜ Solidez da Seguradora",
            "descricao": "Seguran√ßa de que receber√° quando precisar",
            "detalhes": [
                "Rating de solv√™ncia (ANS, SUSEP)",
                "Tempo de mercado e reputa√ß√£o",
                "√çndice de reclama√ß√µes (Procon)",
                "Rede de hospitais e atendimento"
            ],
            "icone": "üèÜ"
        }
    ]
    
    col1, col2 = st.columns(2)
    for i, criterio in enumerate(criterios):
        with col1 if i % 2 == 0 else col2:
            st.markdown(f"""
            <div class="info-card-enhanced" style="border-color: #667eea">
                <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                    <span style="font-size: 2rem; margin-right: 1rem;">{criterio['icone']}</span>
                    <h4 style="margin: 0; color: #2c3e50;">{criterio['titulo']}</h4>
                </div>
                <p style="color: #666; margin-bottom: 1rem;">{criterio['descricao']}</p>
                <ul style="color: #666; padding-left: 1.5rem;">
            """, unsafe_allow_html=True)
            
            for detalhe in criterio['detalhes']:
                st.markdown(f"<li>{detalhe}</li>", unsafe_allow_html=True)
            
            st.markdown("</ul></div>", unsafe_allow_html=True)
    
    # Matriz de Decis√£o por Perfil
    st.markdown("""
    <div class="section-header">
        <h3 style="margin: 0; font-size: 1.5rem;">üé≠ Matriz de Decis√£o por Perfil</h3>
    </div>
    """, unsafe_allow_html=True)
    
    matriz_decisao = {
        "üë∂ Jovem Solteiro (18-30 anos)": {
            "foco": "Prote√ß√£o b√°sica + acumula√ß√£o",
            "recomendacao": "Term Life + Doen√ßas Graves",
            "seguradoras": ["MAG Seguros", "Azos"],
            "valor_sugerido": "R$ 50-150/m√™s"
        },
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Fam√≠lia com Filhos": {
            "foco": "Prote√ß√£o familiar completa",
            "recomendacao": "Whole Life + Term Life + Doen√ßas Graves",
            "seguradoras": ["Prudential", "Icatu"],
            "valor_sugerido": "R$ 150-300/m√™s"
        },
        "üíº Executivo Alta Renda": {
            "foco": "Prote√ß√£o patrimonial + sa√∫de premium",
            "recomendacao": "Whole Life + Doen√ßas Graves Ampliado",
            "seguradoras": ["Omint", "Icatu"],
            "valor_sugerido": "R$ 300+/m√™s"
        },
        "üè¢ Profissional Liberal": {
            "foco": "Prote√ß√£o de renda + patrim√¥nio",
            "recomendacao": "DIT + Invalidez + Whole Life",
            "seguradoras": ["MetLife", "Prudential"],
            "valor_sugerido": "R$ 200-400/m√™s"
        }
    }
    
    for perfil, dados in matriz_decisao.items():
        st.markdown(f"""
        <div class="decision-matrix">
            <h4 style="color: #2c3e50; margin-bottom: 1rem;">{perfil}</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                <div>
                    <strong>üéØ Foco Principal:</strong><br>
                    <span style="color: #666;">{dados['foco']}</span>
                </div>
                <div>
                    <strong>üõ°Ô∏è Coberturas Recomendadas:</strong><br>
                    <span style="color: #666;">{dados['recomendacao']}</span>
                </div>
                <div>
                    <strong>üèÜ Seguradoras Ideais:</strong><br>
                    <span style="color: #666;">{', '.join(dados['seguradoras'])}</span>
                </div>
                <div>
                    <strong>üí∞ Investimento Sugerido:</strong><br>
                    <span style="color: #667eea; font-weight: bold;">{dados['valor_sugerido']}</span>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Perguntas para Autoavalia√ß√£o
    st.markdown("""
    <div class="section-header">
        <h3 style="margin: 0; font-size: 1.5rem;">ü§î Perguntas para Autoavalia√ß√£o</h3>
    </div>
    """, unsafe_allow_html=True)
    
    perguntas = [
        "Qual √© minha principal preocupa√ß√£o financeira para minha fam√≠lia?",
        "Quantas pessoas dependem da minha renda atualmente?",
        "Tenho d√≠vidas ou financiamentos que precisariam ser quitados?",
        "Qual √© o valor necess√°rio para educar meus filhos at√© a faculdade?",
        "Meu patrim√¥nio est√° adequadamente protegido?",
        "Preciso de cobertura internacional por viagens a trabalho?",
        "Minha profiss√£o envolve riscos espec√≠ficos?",
        "Tenho condi√ß√µes pr√©-existentes que precisam de cobertura especial?"
    ]
    
    for i, pergunta in enumerate(perguntas, 1):
        st.markdown(f"""
        <div class="profile-question">
            <div style="display: flex; align-items: center;">
                <span style="background: white; color: #667eea; border-radius: 50%; width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; font-weight: bold; margin-right: 1rem;">{i}</span>
                <span style="font-size: 1.1rem;">{pergunta}</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Fluxo de Decis√£o
    st.markdown("""
    <div class="section-header">
        <h3 style="margin: 0; font-size: 1.5rem;">üîÑ Fluxo de Decis√£o Recomendado</h3>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="flow-chart">
        <h4 style="color: #2c3e50; margin-bottom: 2rem;">üéØ Siga Este Processo para Decidir</h4>
        <div style="display: flex; flex-direction: column; align-items: center; gap: 1.5rem;">
            <div style="background: #667eea; color: white; padding: 1rem 2rem; border-radius: 25px; font-weight: bold; text-align: center;">
                1Ô∏è‚É£ Identifique Suas Necessidades
            </div>
            <div style="font-size: 1.5rem;">‚¨áÔ∏è</div>
            <div style="background: #00b09b; color: white; padding: 1rem 2rem; border-radius: 25px; font-weight: bold; text-align: center;">
                2Ô∏è‚É£ Calcule o Capital Necess√°rio
            </div>
            <div style="font-size: 1.5rem;">‚¨áÔ∏è</div>
            <div style="background: #ff6b6b; color: white; padding: 1rem 2rem; border-radius: 25px; font-weight: bold; text-align: center;">
                3Ô∏è‚É£ Compare Seguradoras
            </div>
            <div style="font-size: 1.5rem;">‚¨áÔ∏è</div>
            <div style="background: #ffa726; color: white; padding: 1rem 2rem; border-radius: 25px; font-weight: bold; text-align: center;">
                4Ô∏è‚É£ Analise Coberturas e Exclus√µes
            </div>
            <div style="font-size: 1.5rem;">‚¨áÔ∏è</div>
            <div style="background: #4ecdc4; color: white; padding: 1rem 2rem; border-radius: 25px; font-weight: bold; text-align: center;">
                5Ô∏è‚É£ Escolha o Melhor Custo-Benef√≠cio
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# ---------- INTERFACE PRINCIPAL ----------
st.markdown("""
<div class="main-header floating-card">
    <h1 class="main-title">üöÄ BeSmart PRO</h1>
    <h3 style="font-size: 1.8rem; margin-bottom: 1rem; opacity: 0.9; font-weight: 300;">Sistema Inteligente de C√°lculo de Capital Segurado</h3>
    <div style="display: flex; justify-content: center; gap: 2rem; flex-wrap: wrap; margin-top: 2rem;">
        <span style="background: rgba(255,255,255,0.2); padding: 0.8rem 1.8rem; border-radius: 25px; backdrop-filter: blur(10px); font-weight: 500;">üåü Omint</span>
        <span style="background: rgba(255,255,255,0.2); padding: 0.8rem 1.8rem; border-radius: 25px; backdrop-filter: blur(10px); font-weight: 500;">üí´ MAG</span>
        <span style="background: rgba(255,255,255,0.2); padding: 0.8rem 1.8rem; border-radius: 25px; backdrop-filter: blur(10px); font-weight: 500;">‚ö° Icatu</span>
        <span style="background: rgba(255,255,255,0.2); padding: 0.8rem 1.8rem; border-radius: 25px; backdrop-filter: blur(10px); font-weight: 500;">üîÆ Prudential</span>
        <span style="background: rgba(255,255,255,0.2); padding: 0.8rem 1.8rem; border-radius: 25px; backdrop-filter: blur(10px); font-weight: 500;">üéØ MetLife</span>
        <span style="background: rgba(255,255,255,0.2); padding: 0.8rem 1.8rem; border-radius: 25px; backdrop-filter: blur(10px); font-weight: 500;">üöÄ Azos</span>
    </div>
</div>
""", unsafe_allow_html=True)

# Navega√ß√£o ATUALIZADA
st.sidebar.markdown("""
<div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2rem; border-radius: 15px; text-align: center; margin-bottom: 2rem; box-shadow: 0 6px 20px rgba(0,0,0,0.15);">
    <h3 style="color: white; margin: 0; font-size: 1.5rem;">üß≠ Navega√ß√£o</h3>
</div>
""", unsafe_allow_html=True)

# Navega√ß√£o atualizada com nova ordem e abas
aba_selecionada = st.sidebar.radio("", [
    "üéØ Dashboard", 
    "üë§ Cadastro Completo", 
    "üèÜ Como Escolher o Melhor",  # NOVA ABA
    "üë• An√°lise do Cliente",      # ABA CLIENTE APRIMORADA
    "üõ°Ô∏è An√°lise de Coberturas",
    "üìä Comparativo de Produtos",
    "‚ùì FAQ Interativo"  
], label_visibility="collapsed")

# ---------- ABA 1: DASHBOARD ----------
if aba_selecionada == "üéØ Dashboard":
    st.markdown('<div class="section-title">üìä Dashboard Interativo</div>', unsafe_allow_html=True)
    
    if st.session_state.cliente:
        cliente = st.session_state.cliente
        risk_score = InsuranceAI.calculate_risk_score(cliente)
        calculo = CalculadoraCapital.calcular_capital_total(cliente)
        pilar_financeiro = cliente.get('pilar_financeiro', False)
        estado_civil = cliente.get('estado_civil', '')
        regime_casamento = cliente.get('regime_casamento', '')
        patrimonio_liquido = cliente.get('patrimonio_liquido', 0)
        patrimonio_imobilizado = cliente.get('patrimonio_imobilizado', 0)
        patrimonio_total = cliente.get('patrimonio_total', 0)
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üí∞ Capital Sugerido</div>
                <div style="font-size: 2rem; font-weight: bold; color: #667eea; margin-bottom: 0.5rem;">{formatar_moeda(calculo['capital_total'])}</div>
                <div style="font-size: 0.9rem; color: #28a745; background: rgba(40, 167, 69, 0.1); padding: 0.3rem 0.8rem; border-radius: 10px; display: inline-block;">‚Üë Recomenda√ß√£o Ideal</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            risco_cor = '#dc3545' if risk_score < 50 else '#ffc107' if risk_score < 70 else '#28a745'
            risco_texto = 'üî¥ Alto Risco' if risk_score < 50 else 'üü° M√©dio Risco' if risk_score < 70 else 'üü¢ Baixo Risco'
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üõ°Ô∏è Score de Risco</div>
                <div style="font-size: 2rem; font-weight: bold; color: {risco_cor}; margin-bottom: 0.5rem;">{risk_score}/100</div>
                <div style="font-size: 0.9rem; color: {risco_cor}; background: rgba(220, 53, 69, 0.1); padding: 0.3rem 0.8rem; border-radius: 10px; display: inline-block;">{risco_texto}</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dependentes</div>
                <div style="font-size: 2rem; font-weight: bold; color: #17a2b8; margin-bottom: 0.5rem;">{cliente.get('dependentes', 0)}</div>
                <div style="font-size: 0.9rem; color: #17a2b8; background: rgba(23, 162, 184, 0.1); padding: 0.3rem 0.8rem; border-radius: 10px; display: inline-block;">Pessoas protegidas</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            coberturas_ativas = len([v for v in calculo['coberturas_detalhadas'].values() if v > 0])
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üìä Coberturas</div>
                <div style="font-size: 2rem; font-weight: bold; color: #6f42c1; margin-bottom: 0.5rem;">{coberturas_ativas}/6</div>
                <div style="font-size: 0.9rem; color: #6f42c1; background: rgba(111, 66, 193, 0.1); padding: 0.3rem 0.8rem; border-radius: 10px; display: inline-block;">
                    {f"{coberturas_ativas/6*100:.0f}% do potencial" if coberturas_ativas > 0 else "Complete seu perfil"}
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Informa√ß√µes sobre estado civil
        info_estado_civil = ""
        if estado_civil == 'Casado(a)':
            info_estado_civil = f"üíç **Estado Civil:** {estado_civil} - {regime_casamento}"
            if regime_casamento == 'Separa√ß√£o Total de Bens':
                info_estado_civil += " (Prote√ß√£o patrimonial ajustada)"
        elif estado_civil:
            info_estado_civil = f"üíç **Estado Civil:** {estado_civil}"
        
        # Card de Patrim√¥nio
        st.markdown(f"""
        <div class="patrimonio-card">
            <h3 class="capital-title">üí∞ COMPOSI√á√ÉO PATRIMONIAL</h3>
            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 2rem; margin: 2rem 0;">
                <div style="text-align: center;">
                    <div style="font-size: 1.2rem; margin-bottom: 0.5rem;">üíµ L√≠quido</div>
                    <div style="font-size: 1.8rem; font-weight: bold;">{formatar_moeda(patrimonio_liquido)}</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 1.2rem; margin-bottom: 0.5rem;">üè† Imobilizado</div>
                    <div style="font-size: 1.8rem; font-weight: bold;">{formatar_moeda(patrimonio_imobilizado)}</div>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 1.2rem; margin-bottom: 0.5rem;">üìä Total</div>
                    <div style="font-size: 2rem; font-weight: bold; text-shadow: 0 2px 10px rgba(0,0,0,0.3);">{formatar_moeda(patrimonio_total)}</div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Capital Total
        st.markdown(f"""
        <div class="capital-total">
            <h3 class="capital-title">üíé CAPITAL TOTAL SUGERIDO</h3>
            <p class="capital-value">{formatar_moeda(calculo['capital_total'])}</p>
            <p class="capital-subtitle">Prote√ß√£o completa e personalizada para voc√™ e sua fam√≠lia</p>
            <div style="margin-top: 1rem; font-size: 1.1rem;">
                üéØ <strong>Perfil:</strong> {'üèÜ Pilar Financeiro' if pilar_financeiro else 'ü§ù Contribuidor Familiar'}
            </div>
            {f'<div style="margin-top: 0.5rem; font-size: 1.1rem;">{info_estado_civil}</div>' if info_estado_civil else ''}
        </div>
        """, unsafe_allow_html=True)
        
        # An√°lise de Riscos
        show_risk_analysis(cliente)
        
        # Storytelling Personalizado
        st.markdown('<div class="subsection-title">üìñ Sua Jornada de Prote√ß√£o</div>', unsafe_allow_html=True)
        st.markdown(f"""
        <div class="success-card">
            {InsuranceAI.generate_personalized_story(cliente)}
        </div>
        """, unsafe_allow_html=True)
        
    else:
        st.markdown("""
        <div style="text-align: center; padding: 4rem 2rem; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); margin: 2rem 0;">
            <h2 style="color: #667eea; margin-bottom: 1.5rem; font-size: 2.5rem;">üëã Bem-vindo ao BeSmart PRO!</h2>
            <p style="font-size: 1.3rem; color: #666; margin-bottom: 2rem; line-height: 1.6;">Complete seu cadastro para descobrir o <span class="highlight-text">capital segurado ideal</span> para sua prote√ß√£o.</p>
            <div style="font-size: 5rem; margin-bottom: 2rem;">üöÄ</div>
            <p style="color: #999; font-size: 1.1rem;">Sistema Inteligente de C√°lculo de Capital Segurado</p>
        </div>
        """, unsafe_allow_html=True)

# ---------- ABA 2: CADASTRO COMPLETO ----------
elif aba_selecionada == "üë§ Cadastro Completo":
    st.markdown('<div class="section-title">üë§ Cadastro Completo para C√°lculo de Capital</div>', unsafe_allow_html=True)
    
    create_progress_tracker(1)
    
    with st.form("cadastro_completo"):
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">üìã Informa√ß√µes B√°sicas</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üìù Dados Pessoais</h4>
            """, unsafe_allow_html=True)
            nome = st.text_input("**Nome Completo***", placeholder="Digite seu nome completo", help="Nome completo do cliente")
            idade = st.number_input("**Idade***", min_value=18, max_value=80, value=30, help="Idade entre 18 e 80 anos")
            profissao = st.text_input("**Profiss√£o***", placeholder="Sua profiss√£o atual", help="Profiss√£o principal do cliente")
            
            # === MODIFICADO: REGIME APARECE PARA QUALQUER ESTADO CIVIL ===
            estado_civil = st.selectbox("**Estado Civil***", ESTADO_CIVIL_OPCOES, help="Estado civil do cliente")
            
            # CAMPO REGIME DE CASAMENTO - AGORA DISPON√çVEL PARA TODOS (N√ÉO OBRIGAT√ìRIO)
            regime_casamento = st.selectbox(
                "**Regime de Casamento** (Opcional)", 
                REGIME_CASAMENTO_OPCOES,
                help="Regime de bens - preencha se aplic√°vel ao seu estado civil"
            )
            
            dependentes = st.number_input("**N√∫mero de dependentes***", min_value=0, max_value=10, value=0, help="Pessoas que dependem financeiramente do cliente")
            st.markdown("</div>", unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üí∞ Situa√ß√£o Financeira</h4>
            """, unsafe_allow_html=True)
            
            # === MODIFICADO: CAMPOS DE MOEDA FORMATADOS COM VALOR POR EXTENSO ===
            renda_mensal = criar_campo_moeda_com_extenso(
                "**Renda Mensal L√≠quida (R$)***", 
                valor_padrao=5000.0, 
                key="renda_mensal",
                help_text="Renda l√≠quida mensal do cliente"
            )
            
            patrimonio_liquido = criar_campo_moeda_com_extenso(
                "**Patrim√¥nio L√≠quido (R$)***", 
                valor_padrao=0.0,
                key="patrimonio_liquido",
                help_text="Patrim√¥nio l√≠quido (investimentos, aplica√ß√µes, dinheiro em conta, etc.)"
            )
            
            patrimonio_imobilizado = criar_campo_moeda_com_extenso(
                "**Patrim√¥nio Imobilizado (R$)***", 
                valor_padrao=0.0,
                key="patrimonio_imobilizado",
                help_text="Patrim√¥nio imobilizado (im√≥veis, ve√≠culos, equipamentos, etc.)"
            )
            
            # === NOVO: CAMPOS PARA REGIME PARCIAL - SEMPRE VIS√çVEIS ===
            st.markdown("---")
            st.markdown("**üíç Informa√ß√µes para Regime de Casamento (Opcional)**")
            
            patrimonio_antes_casamento = criar_campo_moeda_com_extenso(
                "**Patrim√¥nio Antes do Casamento (R$)**",
                valor_padrao=0.0,
                key="patrimonio_antes_casamento",
                help_text="Preencha apenas se for casado(a) em regime parcial de bens"
            )
            
            patrimonio_depois_casamento = criar_campo_moeda_com_extenso(
                "**Patrim√¥nio Depois do Casamento (R$)**", 
                valor_padrao=0.0,
                key="patrimonio_depois_casamento",
                help_text="Preencha apenas se for casado(a) em regime parcial de bens"
            )
            
            # Calcular patrim√¥nio total automaticamente
            patrimonio_total = patrimonio_liquido + patrimonio_imobilizado
            
            # Mostrar patrim√¥nio total calculado
            _, patrimonio_total_extenso = formatar_valor_com_extenso(patrimonio_total)
            st.markdown(f"""
            <div class="metric-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <div style="font-size: 1rem; margin-bottom: 0.8rem;">üí∞ Patrim√¥nio Total Calculado</div>
                <div style="font-size: 1.8rem; font-weight: bold; margin-bottom: 0.5rem;">{formatar_moeda(patrimonio_total)}</div>
                <div style="font-size: 0.9rem; opacity: 0.9;">(L√≠quido + Imobilizado)</div>
                <div style="font-size: 0.8rem; opacity: 0.8; margin-top: 0.5rem; font-style: italic;">{patrimonio_total_extenso}</div>
            </div>
            """, unsafe_allow_html=True)
            
            despesas_mensais = criar_campo_moeda_com_extenso(
                "**Despesas Mensais Fixas (R$)***", 
                valor_padrao=2000.0,
                key="despesas_mensais",
                help_text="Despesas mensais fixas do cliente"
            )
            st.markdown("</div>", unsafe_allow_html=True)
        
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dados Familiares</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col3, col4 = st.columns(2)
        
        with col3:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üè† Despesas Familiares</h4>
            """, unsafe_allow_html=True)
            
            # === NOVO: SEPARA√á√ÉO DE DESPESAS MENSAL COM FILHOS E SEM FILHOS ===
            st.markdown("**üí∏ Despesas Mensais Detalhadas**")
            
            despesas_sem_filhos = criar_campo_moeda_com_extenso(
                "**Despesas Mensais Sem Filhos (R$)**", 
                valor_padrao=despesas_mensais,
                key="despesas_sem_filhos",
                help_text="Despesas mensais sem considerar filhos (moradia, alimenta√ß√£o, transporte, etc.)"
            )
            
            despesas_filhos_mensais = criar_campo_moeda_com_extenso(
                "**Despesas Mensais com Filhos (R$)**", 
                valor_padrao=0.0,
                key="despesas_filhos_mensais",
                help_text="Despesas espec√≠ficas com filhos (educa√ß√£o, sa√∫de, alimenta√ß√£o, etc.)"
            )
            
            # Atualizar despesas totais
            despesas_mensais = despesas_sem_filhos + despesas_filhos_mensais
            
            anos_ate_independencia = st.number_input("**Anos at√© Independ√™ncia dos Filhos**", min_value=0, max_value=30, value=0,
                                                   help="Anos at√© que os filhos se tornem independentes financeiramente")
            st.markdown("</div>", unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üí° Informa√ß√µes Importantes</h4>
                <p style="color: #666; line-height: 1.5; margin: 0;">
                    <strong>DIT e DIH:</strong> Calculados automaticamente como <strong>(Despesas Mensais) / 30</strong><br><br>
                    Estes valores representam o valor di√°rio necess√°rio para manter seu padr√£o de vida durante incapacidade ou interna√ß√£o.
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # SE√á√ÉO: CHECKLIST DE COBERTURAS
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">‚úÖ Checklist de Coberturas</h3>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="info-card">
            <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üéØ Selecione as Coberturas Desejadas</h4>
            <p style="color: #666; line-height: 1.5; margin: 0;">
                Marque as coberturas que deseja incluir no c√°lculo. Voc√™ pode desmarcar aquelas que n√£o s√£o de seu interesse.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col_cobertura1, col_cobertura2 = st.columns(2)
        
        with col_cobertura1:
            for cobertura in ['Doen√ßas Graves', 'Whole Life', 'Term Life']:
                st.session_state.coberturas_selecionadas[cobertura] = st.checkbox(
                    f"**{cobertura}**", 
                    value=st.session_state.coberturas_selecionadas[cobertura],
                    key=f"check_{cobertura}",
                    help=f"Incluir {cobertura} no c√°lculo"
                )
        
        with col_cobertura2:
            for cobertura in ['Invalidez Permanente', 'Di√°ria Incapacidade Tempor√°ria', 'Di√°ria Interna√ß√£o Hospitalar']:
                st.session_state.coberturas_selecionadas[cobertura] = st.checkbox(
                    f"**{cobertura}**", 
                    value=st.session_state.coberturas_selecionadas[cobertura],
                    key=f"check_{cobertura}",
                    help=f"Incluir {cobertura} no c√°lculo"
                )
        
        # CONFIGURA√á√ÉO ESPEC√çFICA PARA DOEN√áAS GRAVES
        if st.session_state.coberturas_selecionadas['Doen√ßas Graves']:
            st.markdown("---")
            st.markdown("**ü¶† Configura√ß√£o para Doen√ßas Graves**")
            
            col_dg1, col_dg2 = st.columns(2)
            
            with col_dg1:
                st.session_state.meses_doencas_graves = st.radio(
                    "**Per√≠odo de cobertura para doen√ßas graves:**",
                    [24, 36],
                    index=1,  # Default para 36 meses
                    help="Escolha entre 24 ou 36 meses de despesas para c√°lculo"
                )
            
            with col_dg2:
                st.info(f"""
                **üí° Informa√ß√£o:**
                
                - **{st.session_state.meses_doencas_graves} meses** de despesas
                - Cobertura para tratamento e recupera√ß√£o
                - Per√≠odo adequado para a maioria dos tratamentos
                """)
        
        # SE√á√ÉO: PILAR FINANCEIRO
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">üèÜ Pilar Financeiro da Fam√≠lia</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col5, col6 = st.columns(2)
        
        with col5:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üéØ Responsabilidade Financeira</h4>
            """, unsafe_allow_html=True)
            
            pilar_financeiro = st.radio(
                "**Voc√™ √© o pilar financeiro principal da fam√≠lia?***",
                ["Sim", "N√£o"],
                horizontal=True,
                help="√â o principal provedor financeiro da fam√≠lia?"
            )
            
            if pilar_financeiro == "Sim":
                st.markdown("""
                <div class="pilar-financeiro-card">
                    <h4 style="margin: 0 0 1rem 0; color: white;">üèÜ Pilar Financeiro Identificado</h4>
                    <p style="margin: 0; line-height: 1.5;">
                        <strong>Prote√ß√£o Refor√ßada:</strong> Sua prote√ß√£o patrimonial ser√° calculada em <strong>20% do seu patrim√¥nio</strong> para garantir seguran√ßa m√°xima √† sua fam√≠lia.
                    </p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                <div class="info-card" style="background: rgba(255,255,255,0.8);">
                    <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">ü§ù Contribuidor Familiar</h4>
                    <p style="color: #666; line-height: 1.5; margin: 0;">
                        <strong>Prote√ß√£o Adequada:</strong> Sua prote√ß√£o patrimonial ser√° calculada em <strong>15% do seu patrim√¥nio</strong> para uma cobertura equilibrada.
                    </p>
                </div>
                """, unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        with col6:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üí° Por que essa informa√ß√£o √© importante?</h4>
                <p style="color: #666; line-height: 1.5; margin: 0;">
                    O <strong>pilar financeiro</strong> da fam√≠lia tem uma responsabilidade maior na prote√ß√£o do patrim√¥nio familiar:
                </p>
                <ul style="color: #666; line-height: 1.5; margin: 1rem 0;">
                    <li><strong>Pilar Financeiro (20%):</strong> Prote√ß√£o refor√ßada para o principal provedor</li>
                    <li><strong>Contribuidor (15%):</strong> Prote√ß√£o adequada para quem divide responsabilidades</li>
                </ul>
                <p style="color: #666; line-height: 1.5; margin: 0;">
                    Esta diferencia√ß√£o garante que cada perfil receba a <strong>prote√ß√£o ideal</strong> para sua realidade familiar.
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">üéØ Perfil do Cliente</h3>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="info-card">
            <p style="color: #666; margin-bottom: 1rem; font-size: 1rem;">
                Selecione os perfis que melhor se aplicam ao cliente. Esta informa√ß√£o nos ajudar√° a recomendar as <strong>melhores seguradoras</strong> para suas necessidades espec√≠ficas.
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        col9, col10 = st.columns(2)
        perfil_cliente = {}
        
        with col9:
            for i, perfil in enumerate(PERFIS_CLIENTE[:10]):
                perfil_cliente[perfil] = st.checkbox(f"**{perfil}**", key=f"perfil_{i}")
        
        with col10:
            for i, perfil in enumerate(PERFIS_CLIENTE[10:]):
                perfil_cliente[perfil] = st.checkbox(f"**{perfil}**", key=f"perfil_{i+10}")
        
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">üëî Dados do Assessor</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col11, col12 = st.columns(2)
        
        with col11:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üè¢ Filial</h4>
            """, unsafe_allow_html=True)
            filial = st.selectbox("**Filial***", FILIAIS, help="Selecione a filial do assessor")
            st.markdown("</div>", unsafe_allow_html=True)
        
        with col12:
            st.markdown("""
            <div class="info-card">
                <h4 style="margin: 0 0 1rem 0; color: #2c3e50;">üë§ Assessor</h4>
            """, unsafe_allow_html=True)
            assessor = st.text_input("**Nome do Assessor***", placeholder="Nome do seu assessor BeSmart", help="Nome do assessor respons√°vel")
            st.markdown("</div>", unsafe_allow_html=True)
        
        submitted = st.form_submit_button("üöÄ **Calcular Capital Segurado**", use_container_width=True)
        
        if submitted:
            if nome and profissao and renda_mensal > 0 and despesas_mensais > 0 and filial and assessor:
                # Preparar dados do cliente
                dados_cliente = {
                    'nome': nome,
                    'idade': idade,
                    'profissao': profissao,
                    'estado_civil': estado_civil,
                    'regime_casamento': regime_casamento,
                    'dependentes': dependentes,
                    'renda_mensal': renda_mensal,
                    'patrimonio_liquido': patrimonio_liquido,
                    'patrimonio_imobilizado': patrimonio_imobilizado,
                    'patrimonio_total': patrimonio_total,
                    'despesas_mensais': despesas_mensais,
                    'despesas_sem_filhos': despesas_sem_filhos,
                    'despesas_filhos_mensais': despesas_filhos_mensais,
                    'anos_ate_independencia': anos_ate_independencia,
                    'pilar_financeiro': pilar_financeiro == "Sim",
                    'patrimonio_antes_casamento': patrimonio_antes_casamento,
                    'patrimonio_depois_casamento': patrimonio_depois_casamento
                }
                
                calculo = CalculadoraCapital.calcular_capital_total(dados_cliente)
                
                st.session_state.cliente = {
                    'nome': nome,
                    'idade': idade,
                    'profissao': profissao,
                    'estado_civil': estado_civil,
                    'regime_casamento': regime_casamento,
                    'dependentes': dependentes,
                    'renda_mensal': renda_mensal,
                    'patrimonio_liquido': patrimonio_liquido,
                    'patrimonio_imobilizado': patrimonio_imobilizado,
                    'patrimonio_total': patrimonio_total,
                    'despesas_mensais': despesas_mensais,
                    'despesas_sem_filhos': despesas_sem_filhos,
                    'despesas_filhos_mensais': despesas_filhos_mensais,
                    'anos_ate_independencia': anos_ate_independencia,
                    'pilar_financeiro': pilar_financeiro == "Sim",
                    'patrimonio_antes_casamento': patrimonio_antes_casamento,
                    'patrimonio_depois_casamento': patrimonio_depois_casamento,
                    'filial': filial,
                    'assessor': assessor,
                    'capital_sugerido': calculo['capital_total'],
                    'detalhes_calculo': calculo['coberturas_detalhadas']
                }
                
                st.session_state.perfil_cliente = perfil_cliente
                st.session_state.simulation_step = 2
                st.session_state.calculation_complete = True
                
                st.success("""
                **‚úÖ Capital segurado calculado com sucesso!**
                
                Seu capital segurado ideal foi calculado com base nas informa√ß√µes fornecidas e na metodologia da tabela BeSmart.
                """)
                st.balloons()
                
                st.markdown('<div class="subsection-title">üìä Resumo do C√°lculo</div>', unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"""
                    <div class="metric-card">
                        <div style="font-size: 1rem; color: #666;">Capital Total Sugerido</div>
                        <div style="font-size: 2rem; font-weight: bold; color: #667eea;">{formatar_moeda(calculo['capital_total'])}</div>
                    </div>
                    """, unsafe_allow_html=True)
                    st.info(f"**üë§ Idade:** {idade} anos")
                    st.info(f"**üíç Estado Civil:** {estado_civil}")
                    if estado_civil == 'Casado(a)':
                        st.info(f"**üìù Regime:** {regime_casamento}")
                    st.info(f"**üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dependentes:** {dependentes}")
                    st.info(f"**üèÜ Pilar Financeiro:** {'Sim' if pilar_financeiro == 'Sim' else 'N√£o'}")
                
                with col2:
                    st.info(f"**üí∞ Renda Mensal:** {formatar_moeda(renda_mensal)}")
                    st.info(f"**üíµ Patrim√¥nio L√≠quido:** {formatar_moeda(patrimonio_liquido)}")
                    st.info(f"**üè† Patrim√¥nio Imobilizado:** {formatar_moeda(patrimonio_imobilizado)}")
                    st.info(f"**üìä Patrim√¥nio Total:** {formatar_moeda(patrimonio_total)}")
                    st.info(f"**üí∏ Despesas Mensais:** {formatar_moeda(despesas_mensais)}")
                
                # Mostrar informa√ß√µes espec√≠ficas do regime parcial se preenchido
                if regime_casamento == "Comunh√£o Parcial de Bens" and (patrimonio_antes_casamento > 0 or patrimonio_depois_casamento > 0):
                    st.markdown('<div class="subsection-title">üìä Detalhes do Regime Parcial</div>', unsafe_allow_html=True)
                    col_parcial1, col_parcial2 = st.columns(2)
                    
                    with col_parcial1:
                        st.info(f"**üí∞ Patrim√¥nio Antes do Casamento:** {formatar_moeda(patrimonio_antes_casamento)}")
                        st.info(f"**üíº Patrim√¥nio Depois do Casamento:** {formatar_moeda(patrimonio_depois_casamento)}")
                    
                    with col_parcial2:
                        patrimonio_ajustado = patrimonio_antes_casamento + (patrimonio_depois_casamento * 0.5)
                        st.info(f"**üßÆ Patrim√¥nio Ajustado:** {formatar_moeda(patrimonio_ajustado)}")
                        percentual_protecao = 0.20 if pilar_financeiro == "Sim" else 0.15
                        st.info(f"**üõ°Ô∏è Percentual de Prote√ß√£o:** {percentual_protecao*100}%")
                
                with st.expander("üìà **Detalhamento das Coberturas**", expanded=True):
                    for cobertura, valor in calculo['coberturas_detalhadas'].items():
                        if valor > 0:
                            if 'Di√°ria' in cobertura:
                                st.write(f"**üõ°Ô∏è {cobertura}:** {formatar_moeda(valor)}/dia")
                            else:
                                st.write(f"**üõ°Ô∏è {cobertura}:** {formatar_moeda(valor)}")
                    
                    # Explica√ß√£o do c√°lculo do Whole Life baseado no pilar financeiro e regime de casamento
                    if 'detalhes_whole_life' in st.session_state.cliente:
                        detalhes = st.session_state.cliente['detalhes_whole_life']
                        st.markdown(f"""
                        **üí° Detalhe do C√°lculo:**
                        - **Prote√ß√£o Patrimonial (Whole Life):** {formatar_moeda(calculo['coberturas_detalhadas']['Whole Life'])}
                        - **Percentual aplicado:** {detalhes['descricao_pilar']} sobre {detalhes['descricao_regime'].lower()}
                        - **Justificativa:** {detalhes['descricao_pilar']} aplicado sobre patrim√¥nio ajustado pelo regime
                        """)
                
                st.markdown('<div class="subsection-title">üèÜ Melhores Seguradoras para seu Perfil</div>', unsafe_allow_html=True)
                melhores_seguradoras = SistemaRecomendacao.recomendar_melhores_seguradoras(perfil_cliente)
                
                for melhor in melhores_seguradoras:
                    emoji = {1: "ü•á", 2: "ü•à", 3: "ü•â"}[melhor['posicao']]
                    st.success(f"{emoji} **{melhor['seguradora']}** - **{melhor['score']} pontos** ({melhor['porcentagem']:.1f}% compatibilidade)")
                
                st.success(f"**üëî Seu assessor {assessor} da filial {filial} entrar√° em contato em breve!**")
                
            else:
                st.error("""
                **‚ö†Ô∏è Por favor, preencha todos os campos obrigat√≥rios (*)**
                
                Certifique-se de que:
                - Nome completo est√° preenchido
                - Profiss√£o est√° informada
                - Renda mensal √© maior que zero
                - Patrim√¥nio l√≠quido foi informado
                - Patrim√¥nio imobilizado foi informado
                - Despesas mensais s√£o maiores que zero
                - Pilar financeiro foi selecionado
                - Filial foi selecionada
                - Nome do assessor est√° preenchido
                """)

# ---------- ABA 3: COMO ESCOLHER O MELHOR ----------
elif aba_selecionada == "üèÜ Como Escolher o Melhor":
    create_how_to_choose_section()

# ---------- ABA 4: AN√ÅLISE DO CLIENTE (APRIMORADA) ----------
elif aba_selecionada == "üë• An√°lise do Cliente":
    st.markdown('<div class="section-title">üë• An√°lise Completa do Cliente</div>', unsafe_allow_html=True)
    
    if not st.session_state.cliente:
        st.warning("""
        **‚ö†Ô∏è Complete seu cadastro primeiro para ver a an√°lise personalizada!**
        
        Acesse a aba **üë§ Cadastro Completo** para fornecer suas informa√ß√µes.
        """)
    else:
        cliente = st.session_state.cliente
        calculo = CalculadoraCapital.calcular_capital_total(cliente)
        
        # Header da An√°lise do Cliente
        st.markdown(f"""
        <div class="success-card">
            <h2 style="margin: 0 0 1rem 0; font-size: 2.5rem; text-align: center;">üë§ An√°lise de {cliente.get('nome', 'Cliente')}</h2>
            <p style="font-size: 1.3rem; opacity: 0.9; text-align: center; margin: 0;">Perfil completo e detalhado do cliente</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Detalhes do Cliente
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="client-details-card">
                <h3 style="color: #2c3e50; margin-bottom: 1.5rem;">üìã Dados Pessoais</h3>
            """, unsafe_allow_html=True)
            
            st.info(f"**üë§ Nome:** {cliente.get('nome', 'N√£o informado')}")
            st.info(f"**üéÇ Idade:** {cliente.get('idade', 'N√£o informado')} anos")
            st.info(f"**üíº Profiss√£o:** {cliente.get('profissao', 'N√£o informado')}")
            st.info(f"**üíç Estado Civil:** {cliente.get('estado_civil', 'N√£o informado')}")
            if cliente.get('estado_civil') == 'Casado(a)':
                st.info(f"**üìù Regime de Casamento:** {cliente.get('regime_casamento', 'N√£o especificado')}")
            st.info(f"**üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Dependentes:** {cliente.get('dependentes', 0)}")
            st.info(f"**üèÜ Pilar Financeiro:** {'Sim' if cliente.get('pilar_financeiro') else 'N√£o'}")
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="client-details-card">
                <h3 style="color: #2c3e50; margin-bottom: 1.5rem;">üí∞ Situa√ß√£o Financeira</h3>
            """, unsafe_allow_html=True)
            
            st.info(f"**üí∞ Renda Mensal:** {formatar_moeda(cliente.get('renda_mensal', 0))}")
            st.info(f"**üíµ Patrim√¥nio L√≠quido:** {formatar_moeda(cliente.get('patrimonio_liquido', 0))}")
            st.info(f"**üè† Patrim√¥nio Imobilizado:** {formatar_moeda(cliente.get('patrimonio_imobilizado', 0))}")
            st.info(f"**üìä Patrim√¥nio Total:** {formatar_moeda(cliente.get('patrimonio_total', 0))}")
            st.info(f"**üí∏ Despesas Mensais:** {formatar_moeda(cliente.get('despesas_mensais', 0))}")
            st.info(f"**üìö Despesas com Filhos:** {formatar_moeda(cliente.get('despesas_filhos_mensais', 0))}")
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        # Capital Segurado e Coberturas
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">üõ°Ô∏è Capital Segurado e Coberturas</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col3, col4 = st.columns(2)
        
        with col3:
            st.markdown(f"""
            <div class="capital-total">
                <h3 class="capital-title">üíé CAPITAL TOTAL SUGERIDO</h3>
                <p class="capital-value">{formatar_moeda(calculo['capital_total'])}</p>
                <p class="capital-subtitle">Prote√ß√£o personalizada baseada no seu perfil</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Principais Coberturas
            st.markdown("""
            <div class="info-card-enhanced" style="border-color: #667eea">
                <h4 style="color: #2c3e50; margin-bottom: 1rem;">üéØ Principais Coberturas</h4>
            """, unsafe_allow_html=True)
            
            coberturas = calculo['coberturas_detalhadas']
            for cobertura, valor in coberturas.items():
                if valor > 0:
                    if 'Di√°ria' in cobertura:
                        st.success(f"**{cobertura}:** {formatar_moeda(valor)}/dia")
                    else:
                        st.success(f"**{cobertura}:** {formatar_moeda(valor)}")
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        with col4:
            # Gr√°fico de Pagamento x Recebimento - CORRIGIDO
            st.markdown("""
            <div class="payment-receipt-chart">
                <h4 style="color: #2c3e50; margin-bottom: 1.5rem; text-align: center;">üìà Proje√ß√£o de Pagamento x Recebimento</h4>
            """, unsafe_allow_html=True)
            
            chart = create_payment_receipt_chart(cliente)
            if chart:
                try:
                    st.altair_chart(chart, use_container_width=True)
                    st.markdown("""
                    <div style="background: rgba(102, 126, 234, 0.1); padding: 1rem; border-radius: 10px; margin-top: 1rem;">
                        <p style="margin: 0; color: #666; font-size: 0.9rem; text-align: center;">
                            <strong>üí° An√°lise:</strong> O gr√°fico mostra a rela√ß√£o entre seus pagamentos acumulados 
                            e o benef√≠cio potencial dispon√≠vel a qualquer momento.
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                except Exception as e:
                    st.error(f"‚ùå Erro ao exibir gr√°fico: {str(e)}")
                    st.info("üìä Alternativa: Visualiza√ß√£o n√£o dispon√≠vel no momento.")
            else:
                st.info("""
                **üí° Complete o cadastro para ver a proje√ß√£o de pagamentos.**
                
                O gr√°fico mostrar√°:
                - Pagamentos acumulados ao longo do tempo
                - Benef√≠cio potencial dispon√≠vel
                - Rela√ß√£o entre investimento e prote√ß√£o
                """)
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        # Parcerias e Informa√ß√µes do Assessor
        st.markdown("""
        <div class="section-header">
            <h3 style="margin: 0; font-size: 1.5rem;">ü§ù Parcerias e Assessor</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col5, col6 = st.columns(2)
        
        with col5:
            st.markdown("""
            <div class="partner-info">
                <h4 style="margin: 0 0 1rem 0; color: white;">üè¢ Informa√ß√µes da Filial</h4>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div>
                        <strong>üìã Filial:</strong><br>
                        <span>{cliente.get('filial', 'N√£o informado')}</span>
                    </div>
                    <div>
                        <strong>üë§ Assessor:</strong><br>
                        <span>{cliente.get('assessor', 'N√£o informado')}</span>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col6:
            st.markdown("""
            <div class="info-card-enhanced" style="border-color: #00b09b">
                <h4 style="color: #2c3e50; margin-bottom: 1rem;">üéØ Pr√≥ximos Passos</h4>
                <ul style="color: #666; line-height: 1.6;">
                    <li><strong>Contato do Assessor:</strong> Em at√© 24h √∫teis</li>
                    <li><strong>An√°lise Personalizada:</strong> Proposta detalhada</li>
                    <li><strong>Documenta√ß√£o:</strong> Lista de documentos necess√°rios</li>
                    <li><strong>Formaliza√ß√£o:</strong> Assinatura digital</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        # Perfis Identificados
        if st.session_state.perfil_cliente:
            st.markdown("""
            <div class="section-header">
                <h3 style="margin: 0; font-size: 1.5rem;">üé≠ Perfis Identificados</h3>
            </div>
            """, unsafe_allow_html=True)
            
            perfis_ativos = [perfil for perfil, ativo in st.session_state.perfil_cliente.items() if ativo]
            if perfis_ativos:
                col7, col8, col9 = st.columns(3)
                cols = [col7, col8, col9]
                
                for i, perfil in enumerate(perfis_ativos):
                    with cols[i % 3]:
                        st.markdown(f"""
                        <div class="profile-checkbox">
                            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                                <span style="color: #667eea; margin-right: 0.5rem;">‚úì</span>
                                <span style="font-weight: 500;">{perfil}</span>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
            else:
                st.info("Nenhum perfil espec√≠fico selecionado.")

# ---------- ABA 5: AN√ÅLISE DE COBERTURAS ----------
elif aba_selecionada == "üõ°Ô∏è An√°lise de Coberturas":
    st.markdown('<div class="section-title">üõ°Ô∏è An√°lise de Coberturas</div>', unsafe_allow_html=True)
    
    if not st.session_state.cliente:
        st.warning("""
        **‚ö†Ô∏è Complete seu cadastro primeiro para uma an√°lise personalizada!**
        
        Acesse a aba **üë§ Cadastro Completo** para fornecer suas informa√ß√µes e receber uma an√°lise detalhada das coberturas ideais para voc√™.
        """)
        
        # Preview das coberturas dispon√≠veis
        st.markdown("""
        <div class="info-card">
            <h4 style="color: #2c3e50; margin-bottom: 1rem;">üí´ Conhe√ßa Nossas Coberturas</h4>
            <p style="color: #666; line-height: 1.6;">
                Oferecemos <strong>6 tipos de coberturas</strong> personalizadas para suas necessidades:
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Grid de coberturas em preview
        col1, col2 = st.columns(2)
        
        with col1:
            for nome, dados in list(COBERTURAS_DETALHADAS.items())[:3]:
                st.markdown(f"""
                <div class="coverage-type-card" style="border-color: {dados['cor']}">
                    <div class="coverage-icon">{dados['icone']}</div>
                    <h4 style="color: #2c3e50; margin-bottom: 0.5rem;">{nome}</h4>
                    <p style="color: #666; font-size: 0.9rem; line-height: 1.4;">{dados['descricao'][:100]}...</p>
                </div>
                """, unsafe_allow_html=True)
        
        with col2:
            for nome, dados in list(COBERTURAS_DETALHADAS.items())[3:]:
                st.markdown(f"""
                <div class="coverage-type-card" style="border-color: {dados['cor']}">
                    <div class="coverage-icon">{dados['icone']}</div>
                    <h4 style="color: #2c3e50; margin-bottom: 0.5rem;">{nome}</h4>
                    <p style="color: #666; font-size: 0.9rem; line-height: 1.4;">{dados['descricao'][:100]}...</p>
                </div>
                """, unsafe_allow_html=True)
        
        st.info("""
        **üí° Complete seu cadastro para receber:**
        - An√°lise personalizada das coberturas
        - C√°lculo autom√°tico dos valores ideais
        - Recomenda√ß√µes espec√≠ficas para seu perfil
        - Compara√ß√£o entre seguradoras
        """)
        
    else:
        cliente = st.session_state.cliente
        calculo = CalculadoraCapital.calcular_capital_total(cliente)
        
        # Hero Section
        create_coverage_hero(cliente, calculo)
        
        # Se√ß√£o principal de coberturas - MODIFICADA
        st.markdown('<div class="subsection-title">üéØ Suas Coberturas Calculadas</div>', unsafe_allow_html=True)
        
        # Grid de coberturas simplificado - APENAS NOME E BOT√ÉO VER DETALHES
        cols = st.columns(3)
        coberturas = calculo['coberturas_detalhadas']
        
        for i, (cobertura_nome, valor) in enumerate(coberturas.items()):
            with cols[i % 3]:
                dados_cobertura = COBERTURAS_DETALHADAS[cobertura_nome]
                
                # Determinar se a cobertura √© relevante
                is_relevante = valor > 0
                badge_text = "‚úÖ Ativa" if is_relevante else "üí° Recomendada"
                badge_cor = "#28a745" if is_relevante else "#6c757d"
                
                st.markdown(f"""
                <div class="coverage-type-card" style="border-color: {dados_cobertura['cor']}">
                    <div class="coverage-badge" style="background: {badge_cor}">{badge_text}</div>
                    <div class="coverage-icon">{dados_cobertura['icone']}</div>
                    <h3 class="coverage-name">{cobertura_nome}</h3>
                    <div class="coverage-value">
                        {formatar_moeda(valor) if 'Di√°ria' not in cobertura_nome else formatar_moeda(valor) + '/dia'}
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Bot√£o para expandir detalhes
                if st.button(f"üìä Ver Detalhes", key=f"btn_{cobertura_nome}", use_container_width=True):
                    st.session_state.selected_coverage = cobertura_nome
                    st.session_state.coverage_details_expanded[cobertura_nome] = True
        
        # Mostrar card detalhado se alguma cobertura foi selecionada
        if st.session_state.selected_coverage:
            cobertura_selecionada = st.session_state.selected_coverage
            dados_selecionados = COBERTURAS_DETALHADAS[cobertura_selecionada]
            valor_selecionado = coberturas[cobertura_selecionada]
            
            if st.session_state.coverage_details_expanded.get(cobertura_selecionada, False):
                st.markdown("---")
                show_detailed_coverage_card(cobertura_selecionada, dados_selecionados, valor_selecionado, cliente)
        
        # Gr√°fico abaixo totalmente lindo e perfeito, bem enquadrado e estruturado
        st.markdown("---")
        st.markdown("""
        <div class="chart-container">
            <h3 style="color: #2c3e50; margin-bottom: 2rem; text-align: center;">üìä Distribui√ß√£o do Capital por Cobertura</h3>
        """, unsafe_allow_html=True)
        
        # Gr√°fico de distribui√ß√£o
        create_coverage_comparison_chart(calculo)
        
        st.markdown("</div>", unsafe_allow_html=True)
        
        # An√°lise Visual
        st.markdown("---")
        st.markdown('<div class="subsection-title">üéØ N√≠veis de Prote√ß√£o da Sua Carteira</div>', unsafe_allow_html=True)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # N√≠veis de prote√ß√£o
            create_protection_level_analysis(cliente, calculo)
        
        with col2:
            # M√©tricas Resumo
            st.markdown('<div class="subsection-title">üìà M√©tricas da Sua Carteira</div>', unsafe_allow_html=True)
            
            coberturas_ativas = len([v for v in coberturas.values() if v > 0])
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üõ°Ô∏è Coberturas Ativas</div>
                <div style="font-size: 2rem; font-weight: bold; color: #667eea; margin-bottom: 0.5rem;">{coberturas_ativas}/6</div>
                <div style="font-size: 0.9rem; color: #28a745; background: rgba(40, 167, 69, 0.1); padding: 0.3rem 0.8rem; border-radius: 10px; display: inline-block;">
                    {f"{coberturas_ativas/6*100:.0f}% do potencial" if coberturas_ativas > 0 else "Complete seu perfil"}
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            maior_cobertura = max(coberturas.values()) if coberturas_ativas > 0 else 0
            nome_maior = [k for k, v in coberturas.items() if v == maior_cobertura][0] if coberturas_ativas > 0 else "Nenhuma"
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üí∞ Maior Cobertura</div>
                <div style="font-size: 1.5rem; font-weight: bold; color: #28a745; margin-bottom: 0.5rem;">{formatar_moeda(maior_cobertura)}</div>
                <div style="font-size: 0.9rem; color: #666;">{nome_maior}</div>
            </div>
            """, unsafe_allow_html=True)
            
            protecao_renda = sum([coberturas['Invalidez Permanente'], coberturas['Di√°ria Incapacidade Tempor√°ria'] * 30 * 6])
            st.markdown(f"""
            <div class="metric-card">
                <div style="font-size: 1rem; color: #666; margin-bottom: 0.8rem;">üíº Prote√ß√£o de Renda</div>
                <div style="font-size: 1.5rem; font-weight: bold; color: #ffc107; margin-bottom: 0.5rem;">{formatar_moeda(protecao_renda)}</div>
                <div style="font-size: 0.9rem; color: #666;">+6 meses de sustento</div>
            </div>
            """, unsafe_allow_html=True)
        
        # Recomenda√ß√µes Inteligentes
        st.markdown("---")
        create_coverage_recommendations(cliente, calculo)

# ---------- ABA 6: COMPARATIVO DE PRODUTOS ----------
elif aba_selecionada == "üìä Comparativo de Produtos":
    st.markdown('<div class="section-title">üìä Comparativo de Produtos de Seguro de Vida</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="success-card">
        <h2 style="margin: 0 0 1rem 0; font-size: 2.5rem; text-align: center;">üèÜ Comparativo Completo</h2>
        <p style="font-size: 1.3rem; opacity: 0.9; text-align: center; margin: 0;">An√°lise detalhada dos produtos das principais seguradoras</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Filtros
    st.markdown("""
    <div class="section-header">
        <h3 style="margin: 0; font-size: 1.5rem;">üîç Filtros de Pesquisa</h3>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        seguradora_filtro = st.selectbox(
            "**Filtrar por Seguradora**",
            ["Todas as Seguradoras"] + list(SEGURADORAS_BESMART.keys())
        )
    
    with col2:
        preco_filtro = st.selectbox(
            "**Faixa de Pre√ßo**",
            ["Qualquer pre√ßo", "At√© R$ 100", "R$ 100 - R$ 200", "R$ 200 - R$ 300", "Acima de R$ 300"]
        )
    
    with col3:
        perfil_filtro = st.selectbox(
            "**Perfil do Cliente**",
            ["Todos os perfis", "Alta Renda", "Classe M√©dia", "Primeiro Seguro", "Empresarial", "Servidores"]
        )
    
    # Comparativo principal
    st.markdown("""
    <div class="section-header">
        <h3 style="margin: 0; font-size: 1.5rem;">üìà Comparativo de Produtos</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Aplicar filtros
    seguradoras_filtradas = SEGURADORAS_BESMART
    
    if seguradora_filtro != "Todas as Seguradoras":
        seguradoras_filtradas = {seguradora_filtro: SEGURADORAS_BESMART[seguradora_filtro]}
    
    # Exibir produtos filtrados
    for seguradora, dados_seguradora in seguradoras_filtradas.items():
        cor_primaria = dados_seguradora["cor"]
        
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, {cor_primaria}, {cor_primaria}99); color: white; padding: 1.5rem 2rem; border-radius: 20px; margin: 2rem 0 1rem 0; box-shadow: 0 8px 25px rgba(0,0,0,0.2);">
            <h2 style="margin: 0; font-size: 2rem; text-align: center;">{seguradora}</h2>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div class="info-card-enhanced" style="border-color: {cor_primaria}">
                <h4 style="color: #2c3e50; margin-bottom: 1rem;">üìä Informa√ß√µes Gerais</h4>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div>
                        <strong>‚≠ê Pontua√ß√£o:</strong><br>
                        <span style="color: {cor_primaria}; font-weight: bold; font-size: 1.2rem;">{dados_seguradora['pontuacao']}/10</span>
                    </div>
                    <div>
                        <strong>üèÜ Rating:</strong><br>
                        <span>{dados_seguradora['rating']}</span>
                    </div>
                    <div>
                        <strong>üí∞ Pre√ßo M√©dio:</strong><br>
                        <span style="font-weight: bold;">{dados_seguradora['preco_medio']}</span>
                    </div>
                    <div>
                        <strong>‚è±Ô∏è Aprova√ß√£o:</strong><br>
                        <span>{dados_seguradora['tempo_aprovacao']}</span>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="info-card-enhanced" style="border-color: {cor_primaria}">
                <h4 style="color: #2c3e50; margin-bottom: 1rem;">üéØ Especialidades</h4>
                <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
            """, unsafe_allow_html=True)
            
            for especialidade in dados_seguradora['especialidade']:
                st.markdown(f'<span class="compatibility-badge" style="background: {cor_primaria}">{especialidade}</span>', unsafe_allow_html=True)
            
            st.markdown("""
                </div>
                <p style="color: #666; margin-top: 1rem; font-size: 0.9rem;">
                    <strong>Perfil Ideal:</strong> {dados_seguradora['perfil_ideal']}
                </p>
            </div>
            """, unsafe_allow_html=True)
        
        # Vantagens
        st.markdown(f"""
        <div class="info-card-enhanced" style="border-color: {cor_primaria}">
            <h4 style="color: #2c3e50; margin-bottom: 1rem;">‚ú® Vantagens Principais</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
        """, unsafe_allow_html=True)
        
        for vantagem in dados_seguradora['vantagens']:
            st.markdown(f"""
            <div class="coverage-feature">
                <div style="display: flex; align-items: center;">
                    <span style="color: {cor_primaria}; margin-right: 0.8rem; font-size: 1.1rem;">‚úì</span>
                    <span style="font-weight: 500;">{vantagem}</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("</div></div>", unsafe_allow_html=True)
        
        # Doen√ßas Graves Cobertas
        st.markdown(f"""
        <div class="info-card-enhanced" style="border-color: {cor_primaria}">
            <h4 style="color: #2c3e50; margin-bottom: 1rem;">ü¶† Doen√ßas Graves Cobertas</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 0.8rem;">
        """, unsafe_allow_html=True)
        
        doencas = dados_seguradora.get('doencas_graves', [])
        for doenca in doencas[:8]:  # Mostrar apenas as primeiras 8
            st.markdown(f"""
            <div style="background: rgba({int(cor_primaria[1:3], 16)}, {int(cor_primaria[3:5], 16)}, {int(cor_primaria[5:7], 16)}, 0.1); padding: 0.8rem; border-radius: 8px; text-align: center;">
                <span style="color: {cor_primaria}; font-weight: 500;">{doenca}</span>
            </div>
            """, unsafe_allow_html=True)
        
        if len(doencas) > 8:
            st.markdown(f"""
            <div style="background: rgba({int(cor_primaria[1:3], 16)}, {int(cor_primaria[3:5], 16)}, {int(cor_primaria[5:7], 16)}, 0.1); padding: 0.8rem; border-radius: 8px; text-align: center;">
                <span style="color: {cor_primaria}; font-weight: 500;">+ {len(doencas) - 8} outras</span>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("</div></div>", unsafe_allow_html=True)

# ---------- ABA 7: FAQ INTERATIVO ----------
elif aba_selecionada == "‚ùì FAQ Interativo":
    st.markdown('<div class="section-title">‚ùì FAQ Interativo</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="success-card">
        <h2 style="margin: 0 0 1rem 0; font-size: 2.5rem; text-align: center;">üí´ Centro de Ajuda BeSmart</h2>
        <p style="font-size: 1.3rem; opacity: 0.9; text-align: center; margin: 0;">Encontre respostas claras para todas suas d√∫vidas sobre seguros</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Barra de pesquisa
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        pesquisa = st.text_input("**üîç Pesquisar no FAQ:**", placeholder="Digite sua d√∫vida...", help="Encontre respostas espec√≠ficas")
    
    # FAQ Simplificado
    faq_simplificado = {
        "üìù Conceitos B√°sicos": [
            {"pergunta": "O que √© um seguro de vida?", "resposta": "√â um contrato onde voc√™ paga pr√™mios em troca de prote√ß√£o financeira para sua fam√≠lia em caso de morte, invalidez ou doen√ßas graves."},
            {"pergunta": "Como funciona um seguro de vida?", "resposta": "Voc√™ escolhe as coberturas, paga pr√™mios peri√≥dicos e, em caso de sinistro, seus benefici√°rios recebem o capital segurado."},
            {"pergunta": "Qual a diferen√ßa entre seguro e previd√™ncia?", "resposta": "Seguro protege contra riscos, previd√™ncia acumula para aposentadoria. O seguro paga aos benefici√°rios, a previd√™ncia paga a voc√™."}
        ],
        "üí∞ Coberturas e Valores": [
            {"pergunta": "Quais s√£o as coberturas b√°sicas?", "resposta": "Morte, invalidez permanente, doen√ßas graves, di√°ria por incapacidade tempor√°ria e di√°ria por interna√ß√£o hospitalar."},
            {"pergunta": "Como √© calculado o capital segurado?", "resposta": "Baseado em sua renda, patrim√¥nio, despesas familiares, n√∫mero de dependentes e objetivos de prote√ß√£o."},
            {"pergunta": "Posso ajustar as coberturas depois?", "resposta": "Sim, a maioria dos seguros permite ajustes nas coberturas e valores conforme suas necessidades mudam."}
        ],
        "üèÜ Escolha do Seguro": [
            {"pergunta": "Como escolher a melhor seguradora?", "resposta": "Considere solidez financeira, coberturas oferecidas, pre√ßo, tempo de aprova√ß√£o e atendimento ao cliente."},
            {"pergunta": "Qual o valor ideal para investir?", "resposta": "Recomendamos entre 1% e 3% da sua renda mensal, dependendo do seu perfil e necessidades de prote√ß√£o."},
            {"pergunta": "Preciso de exames m√©dicos?", "resposta": "Depende da idade, capital segurado e hist√≥rico de sa√∫de. Capitais mais altos geralmente exigem exames."}
        ]
    }
    
    for categoria, perguntas in faq_simplificado.items():
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 1rem 2rem; border-radius: 15px; margin: 2rem 0 1rem 0;">
            <h3 style="margin: 0; font-size: 1.5rem;">{categoria}</h3>
        </div>
        """, unsafe_allow_html=True)
        
        perguntas_filtradas = perguntas
        if pesquisa:
            perguntas_filtradas = [
                p for p in perguntas 
                if pesquisa.lower() in p['pergunta'].lower() or pesquisa.lower() in p['resposta'].lower()
            ]
        
        for pergunta_data in perguntas_filtradas:
            with st.expander(f"**{pergunta_data['pergunta']}**", expanded=False):
                st.info(pergunta_data['resposta'])

# ---------- SIDEBAR ----------
with st.sidebar:
    st.markdown("---")
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%); padding: 1.5rem; border-radius: 15px; color: white; margin-bottom: 1rem; box-shadow: 0 6px 20px rgba(0,0,0,0.15);">
        <h4 style="margin: 0; text-align: center; font-size: 1.3rem;">üè¢ Nossas Seguradoras</h4>
    </div>
    """, unsafe_allow_html=True)
    
    seguradoras_html = """
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.8rem; margin-bottom: 1rem;">
        <div style="background: rgba(255,255,255,0.15); padding: 0.8rem; border-radius: 10px; text-align: center; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
            <div style="font-size: 0.9rem; font-weight: 500;">üåü Omint</div>
        </div>
        <div style="background: rgba(255,255,255,0.15); padding: 0.8rem; border-radius: 10px; text-align: center; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
            <div style="font-size: 0.9rem; font-weight: 500;">üí´ MAG</div>
        </div>
        <div style="background: rgba(255,255,255,0.15); padding: 0.8rem; border-radius: 10px; text-align: center; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
            <div style="font-size: 0.9rem; font-weight: 500;">‚ö° Icatu</div>
        </div>
        <div style="background: rgba(255,255,255,0.15); padding: 0.8rem; border-radius: 10px; text-align: center; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
            <div style="font-size: 0.9rem; font-weight: 500;">üîÆ Prudential</div>
        </div>
        <div style="background: rgba(255,255,255,0.15); padding: 0.8rem; border-radius: 10px; text-align: center; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
            <div style="font-size: 0.9rem; font-weight: 500;">üéØ MetLife</div>
        </div>
        <div style="background: rgba(255,255,255,0.15); padding: 0.8rem; border-radius: 10px; text-align: center; backdrop-filter: blur(10px); border: 1px solid rgba(255,255,255,0.2);">
            <div style="font-size: 0.9rem; font-weight: 500;">üöÄ Azos</div>
        </div>
    </div>
    """
    st.markdown(seguradoras_html, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 1.5rem; border-radius: 15px; color: white; margin-bottom: 1rem; box-shadow: 0 6px 20px rgba(0,0,0,0.15);">
        <h4 style="margin: 0; text-align: center; font-size: 1.3rem;">‚ö° A√ß√µes R√°pidas</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìÑ **Relat√≥rio**", use_container_width=True):
            if st.session_state.cliente:
                st.success("**üìä Relat√≥rio gerado com sucesso!**")
            else:
                st.warning("**Complete o cadastro primeiro!**")
    
    with col2:
        if st.button("üîÑ **Nova Simula√ß√£o**", use_container_width=True):
            st.session_state.cliente = {}
            st.session_state.perfil_cliente = {}
            st.session_state.simulation_step = 0
            st.session_state.calculation_complete = False
            st.rerun()
    
    st.markdown("---")
    
    st.markdown("""
    <div style="background: linear-gradient(135deg, #00b09b 0%, #96c93d 100%); padding: 2rem; border-radius: 15px; color: white; box-shadow: 0 6px 20px rgba(0,0,0,0.15);">
        <h4 style="margin: 0 0 1.5rem 0; text-align: center; font-size: 1.3rem;">ü§ù Vida BeSmart</h4>
        <div style="text-align: center; margin-bottom: 1.5rem;">
            <div style="margin-bottom: 0.8rem; font-size: 1.1rem;">üìû <strong>(21) 99799-4515</strong></div>
            <div style="margin-bottom: 0.8rem; font-size: 1.1rem;">üí¨ <strong>WhatsApp Chat</strong></div>
            <div style="font-size: 1.1rem;">üéØ <strong>Consultor Dedicado</strong></div>
        </div>
        <div style="margin-top: 1.5rem; font-size: 0.9rem; text-align: center;">
            <div style="margin-bottom: 0.5rem;">üîí <strong>Dados Criptografados</strong></div>
            <div style="margin-bottom: 0.5rem;">‚úì <strong>Conformidade LGPD</strong></div>
            <div>‚úì <strong>Certifica√ß√£o Digital</strong></div>
        </div>
    </div>
    """, unsafe_allow_html=True)















